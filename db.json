{"meta":{"version":1,"warehouse":"1.0.2"},"models":{"Asset":[{"_id":"themes/metro-light/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":0},{"_id":"themes/metro-light/source/js/gallery.js","path":"js/gallery.js","modified":0},{"_id":"themes/metro-light/source/img/favicon.png","path":"img/favicon.png","modified":0},{"_id":"themes/metro-light/source/img/apple-icon.png","path":"img/apple-icon.png","modified":0},{"_id":"themes/metro-light/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0},{"_id":"themes/metro-light/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0},{"_id":"themes/metro-light/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0},{"_id":"themes/metro-light/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0},{"_id":"themes/metro-light/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0},{"_id":"themes/metro-light/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0},{"_id":"themes/metro-light/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0},{"_id":"themes/metro-light/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0},{"_id":"themes/metro-light/source/css/style.styl","path":"css/style.styl","modified":0}],"Cache":[{"_id":"source/_posts/communicate-between-controllers.md","shasum":"2869ae91c3375f03e73c41532b88afdb38b15353","modified":1435801561000},{"_id":"source/_posts/css-animation-practice-1.md","shasum":"148e4d61ac845b0e8f2392579a686979732fa0b7","modified":1435287762000},{"_id":"source/_posts/debug-for-X5.md","shasum":"e020cf5c18c2cf1451f84dff1100591492da1078","modified":1437535618000},{"_id":"source/_posts/debug-web-on-android.md","shasum":"e6735e29adfe7e4fa9a62c5a4a498a1564080bee","modified":1436781959000},{"_id":"source/_posts/directive-lazy-load.md","shasum":"671b0fac8e062d5ce1aa41f4c004b3c9c966e995","modified":1434685879000},{"_id":"source/_posts/hello-world.md","shasum":"774b507901d9b17991ace2a70263b6dd6d11999a","modified":1434016474000},{"_id":"source/_posts/hexo.md","shasum":"66f606896db824ec81806402dc622fa3ecbafd92","modified":1434029285000},{"_id":"source/_posts/ionic-commonds.md","shasum":"1cc99a43771584dcc987f500e51c12b4ab2b4468","modified":1438671860000},{"_id":"source/_posts/javascript-module.md","shasum":"7f4156add402cc0f9c62ff364d5774df5f3b2084","modified":1442036778000},{"_id":"source/_posts/learn-css-part-two.md","shasum":"e16274475b695580a39f80a0e478b5b4636ece3e","modified":1437535829000},{"_id":"source/_posts/learn-css-part-one.md","shasum":"c0d52d042b2581afd4c3a683a1b91287b8640e26","modified":1437535818000},{"_id":"source/_posts/learn-flexbox.md","shasum":"cda58bcb34da8e2e030e0d6d6ec4761bdee30ead","modified":1436512749000},{"_id":"source/_posts/newsletter-1-service.md","shasum":"95656091ae2ca2635f3b8a4a8ef510401f7c1e84","modified":1436412932000},{"_id":"source/_posts/plugin-for-Gulp.md","shasum":"537c2effbbdbd34359a47e8cf2a07ba8ca9f0998","modified":1434699048000},{"_id":"source/_posts/working.md","shasum":"530cbd745cbd96c2f208e790d88127a8e135dbb3","modified":1442502688000},{"_id":"source/_posts/source-of-JS-Library.md","shasum":"8de54e821c98677c90d42feb702dc54ba3309564","modified":1442537803000},{"_id":"source/_posts/proxy-for-mobile.md","shasum":"2472628c73840b4b7e09f3ca4f2afd7fab353914","modified":1436152222000},{"_id":"source/_posts/svg-and-canvas-library.md","shasum":"115f407cffbd3d6a2709852cb769a25e14595ce1","modified":1438581471000},{"_id":"source/directive.md","shasum":"54e7683b9d81a4980a964c9c306e6a98a5614929","modified":1437313784000},{"_id":"source/yuanxj/index.md","shasum":"6919628e4b83f8a46471d5de8f1d54eb1d333548","modified":1434686457000},{"_id":"themes/metro-light/source/css/_base/utils.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1434016614000},{"_id":"themes/metro-light/LICENSE","shasum":"fc8c969048693ca0c3097b456489a57ce5371f79","modified":1434016614000},{"_id":"themes/metro-light/README.md","shasum":"5a0356cd6edfade8523d730ad59146463cec262d","modified":1434016614000},{"_id":"themes/metro-light/_config.yml","shasum":"ffd76b7dc51ee2c2f9e4d00a80dd3cf426ecb45d","modified":1434068684000},{"_id":"themes/metro-light/languages/de.yml","shasum":"e076c7f2eb29ebcfb04d94861bf3063c4b08078c","modified":1434016614000},{"_id":"themes/metro-light/languages/default.yml","shasum":"fd7397be7789b43c1c163ab4faf106318811c2a8","modified":1434016614000},{"_id":"themes/metro-light/languages/es.yml","shasum":"de273af604b27812cfd4195e7b7f28ceff2734b3","modified":1434016614000},{"_id":"themes/metro-light/languages/zh-CN.yml","shasum":"ca0118e9081b54cc0fca8596660bd6acf4c0308f","modified":1434016614000},{"_id":"themes/metro-light/languages/ru.yml","shasum":"35aadf8fdd28aaff8a1c8f50e80201dcf8ce0604","modified":1434016614000},{"_id":"themes/metro-light/languages/zh-TW.yml","shasum":"6141b4c7a094c74bd9df7c08908d92b561c1a0c0","modified":1434016614000},{"_id":"themes/metro-light/layout/_partial/after_footer.ejs","shasum":"dd80e3f1e38f780db1c16c2260775916fc72d069","modified":1434016614000},{"_id":"themes/metro-light/layout/_partial/archive.ejs","shasum":"dc63f88da07ede47e833394f7995c87e53cf058d","modified":1434016614000},{"_id":"themes/metro-light/layout/_partial/article.ejs","shasum":"ad9c1d8111293cdaff7d5d732729f58e7b7b6eac","modified":1434016614000},{"_id":"themes/metro-light/layout/_partial/comment.ejs","shasum":"1af03e6fa0f6a09f000515bb1dcad0ba615cfdd8","modified":1434016614000},{"_id":"themes/metro-light/layout/_partial/facebook_comment.ejs","shasum":"3fdc1d0ce9177825e7417635fbc545a35d528d04","modified":1434016614000},{"_id":"themes/metro-light/layout/_partial/google_analytics.ejs","shasum":"6d9817855ea6b1c842f6e2b4d5eb1cebdb9dccaf","modified":1434016614000},{"_id":"themes/metro-light/layout/_partial/footer.ejs","shasum":"e3967805afcdaa7825f2ae97bbfee7a558c1aa65","modified":1434016614000},{"_id":"themes/metro-light/layout/_partial/head.ejs","shasum":"eefac43c94b6da5c22eaa08172366de0f5c7353d","modified":1434016614000},{"_id":"themes/metro-light/layout/_partial/header.ejs","shasum":"66f3c90ab00b653946b8452499f995068b2da3b5","modified":1434016614000},{"_id":"themes/metro-light/layout/_partial/page-heading.ejs","shasum":"ba32f4fe2a83c5b48f6453407f9e0100b1d6eb96","modified":1434016614000},{"_id":"themes/metro-light/layout/_partial/pagination.ejs","shasum":"1206b630a07444e8744365f14ddb26095c925ae1","modified":1434016614000},{"_id":"themes/metro-light/layout/_partial/post/category.ejs","shasum":"be740939c5c2d4ffdbed9557b4e63a590058b476","modified":1434016614000},{"_id":"themes/metro-light/layout/_partial/post/gallery.ejs","shasum":"fafc2501d7e65983b0f5c2b58151ca12e57c0574","modified":1434016614000},{"_id":"themes/metro-light/layout/_partial/post/pagination.ejs","shasum":"66d35c9dd4df912a2cf79426f7c1aafa2156da31","modified":1434016614000},{"_id":"themes/metro-light/layout/_partial/post/share.ejs","shasum":"eef996320043338a31d5a88ae3719be7636da3b0","modified":1434016614000},{"_id":"themes/metro-light/layout/_partial/post/title.ejs","shasum":"80186229c74cad312d9f7cb2e634f424815c7bb7","modified":1434016614000},{"_id":"themes/metro-light/layout/_partial/post/tag.ejs","shasum":"095418df66a27a28cbab16d7cb0d16001b0e23f1","modified":1434016614000},{"_id":"themes/metro-light/layout/_widget/category.ejs","shasum":"7348a985b72379988d0cff1243db5305225d4dc4","modified":1434016614000},{"_id":"themes/metro-light/layout/_partial/sidebar.ejs","shasum":"5f41be2bbebb37736b194d6756c51e129132e5e7","modified":1434016614000},{"_id":"themes/metro-light/layout/_widget/recent_posts.ejs","shasum":"47e9cc334584308a9eab53f0012bef15ddc826d4","modified":1434016614000},{"_id":"themes/metro-light/layout/_widget/search.ejs","shasum":"55c707f3aa7453c305c41898ad22556edd213830","modified":1434016614000},{"_id":"themes/metro-light/layout/_widget/tag.ejs","shasum":"4d15dbfa26bbc6c725a036cfa24b437312e0bc60","modified":1434016614000},{"_id":"themes/metro-light/layout/_widget/tagcloud.ejs","shasum":"a236c86481196ae43206e056ba78cec14f1ac014","modified":1434016614000},{"_id":"themes/metro-light/layout/archive.ejs","shasum":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1434016614000},{"_id":"themes/metro-light/layout/index.ejs","shasum":"e569d8fe0741a24efb89e44781f9e616da17e036","modified":1434016614000},{"_id":"themes/metro-light/layout/page.ejs","shasum":"70cbc9854655773cc6ba84eecaaf330fed430465","modified":1434016614000},{"_id":"themes/metro-light/layout/category.ejs","shasum":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1434016614000},{"_id":"themes/metro-light/layout/layout.ejs","shasum":"50a7c42a151875e7393025fbd135f4b16c84ddc4","modified":1434016614000},{"_id":"themes/metro-light/layout/tag.ejs","shasum":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1434016614000},{"_id":"themes/metro-light/source/css/_base/variable.styl","shasum":"69ec80bb51142a7b599bac7a48d40c7d754c09c7","modified":1434016614000},{"_id":"themes/metro-light/source/css/_base/layout.styl","shasum":"594ea8a2bb6583c8898d93beeeb044eb2c3c1843","modified":1434016614000},{"_id":"themes/metro-light/layout/post.ejs","shasum":"70cbc9854655773cc6ba84eecaaf330fed430465","modified":1434016614000},{"_id":"themes/metro-light/source/css/_partial/archive.styl","shasum":"108bb9de03a3ea3684663086620be5d0aa5834c1","modified":1434016614000},{"_id":"themes/metro-light/source/css/_partial/footer.styl","shasum":"f18bccf7599987b4cbe7fe8d0f0176069b499579","modified":1434016614000},{"_id":"themes/metro-light/source/css/_partial/article.styl","shasum":"a07f15acc4dd966b79dfb4772327a36a2240fa9a","modified":1434016614000},{"_id":"themes/metro-light/source/css/_partial/comment.styl","shasum":"97ff83f31f279a02310f8e4816e0555b9bc2c448","modified":1434016614000},{"_id":"themes/metro-light/source/css/_partial/header.styl","shasum":"ba6fb8535355b5fa905b571b13df3c807187eb18","modified":1434016614000},{"_id":"themes/metro-light/source/css/_partial/index.styl","shasum":"17b8236d93a0477f99cad2963825fa794a1a0547","modified":1434016614000},{"_id":"themes/metro-light/source/css/_partial/syntax.styl","shasum":"6dac3435a74faa483cb98e86847a715c57f01644","modified":1434016614000},{"_id":"themes/metro-light/source/css/_partial/sidebar.styl","shasum":"775ecaacbe06ac35547f9dc096cd4a0cc9d67338","modified":1434016614000},{"_id":"themes/metro-light/source/css/style.styl","shasum":"c03b2520e4a85b981e29516cadc0a365e6500e3d","modified":1434016614000},{"_id":"themes/metro-light/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1434016614000},{"_id":"themes/metro-light/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1434016614000},{"_id":"themes/metro-light/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1434016614000},{"_id":"themes/metro-light/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1434016614000},{"_id":"themes/metro-light/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1434016614000},{"_id":"themes/metro-light/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1434016614000},{"_id":"themes/metro-light/source/fancybox/jquery.fancybox.css","shasum":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1434016614000},{"_id":"themes/metro-light/source/fancybox/jquery.fancybox.pack.js","shasum":"53360764b429c212f424399384417ccc233bb3be","modified":1434016614000},{"_id":"themes/metro-light/source/img/favicon.png","shasum":"31c5df0998116ea74fed57f5436a491382e02ca8","modified":1434016614000},{"_id":"themes/metro-light/source/js/gallery.js","shasum":"d64473e9711d84267fccd1777f6b6b6fae63f34c","modified":1434016614000},{"_id":"themes/metro-light/source/img/apple-icon.png","shasum":"73719f63a0c9b34d2de1398efa51ebc77e285ee0","modified":1434016614000},{"_id":"themes/metro-light/source/js/jquery.imagesloaded.min.js","shasum":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1434016614000},{"_id":"public/js/jquery.imagesloaded.min.js","modified":1442504575603,"shasum":"4109837b1f6477bacc6b095a863b1b95b1b3693f"},{"_id":"public/js/gallery.js","modified":1442504575606,"shasum":"d64473e9711d84267fccd1777f6b6b6fae63f34c"},{"_id":"public/img/favicon.png","modified":1442504575610,"shasum":"31c5df0998116ea74fed57f5436a491382e02ca8"},{"_id":"public/img/apple-icon.png","modified":1442504575614,"shasum":"73719f63a0c9b34d2de1398efa51ebc77e285ee0"},{"_id":"public/fancybox/jquery.fancybox.pack.js","modified":1442504575616,"shasum":"53360764b429c212f424399384417ccc233bb3be"},{"_id":"public/fancybox/jquery.fancybox.css","modified":1442504575617,"shasum":"5f163444617b6cf267342f06ac166a237bb62df9"},{"_id":"public/fancybox/fancybox_sprite@2x.png","modified":1442504575618,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/fancybox/fancybox_sprite.png","modified":1442504575619,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/fancybox/fancybox_overlay.png","modified":1442504575620,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/fancybox/fancybox_loading@2x.gif","modified":1442504575629,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/fancybox/fancybox_loading.gif","modified":1442504575630,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/fancybox/blank.gif","modified":1442504575632,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/css/style.css","modified":1442504576101,"shasum":"1456ee5f05f33ed1742a004fea703a97668c0e15"},{"_id":"public/yuanxj/index.html","modified":1442537842627,"shasum":"cb1f281a2bbf34e0977cabcc2d303e236a2683b7"},{"_id":"public/directive.html","modified":1442537842650,"shasum":"daed9b58932db0cb548ce7959543bf677c173d57"},{"_id":"public/2015/09/17/working/index.html","modified":1442537842662,"shasum":"5a0129c8cc4f184a480de18d52dbbccc375d7733"},{"_id":"public/2015/09/12/javascript-module/index.html","modified":1442537842675,"shasum":"ec074d55427c991b08d485c40aeb611a4adf86a7"},{"_id":"public/2015/08/04/ionic-commonds/index.html","modified":1442537842686,"shasum":"2557df6bf085efa15df01dd9c78453d8d442db19"},{"_id":"public/2015/08/03/svg-and-canvas-library/index.html","modified":1442537842696,"shasum":"36031876441607a830a6aa7a6e4272ef87d3c80b"},{"_id":"public/2015/07/22/debug-for-X5/index.html","modified":1442537842707,"shasum":"fd05bc4a704f92c3be6e745879944865b3f1e959"},{"_id":"public/2015/07/13/debug-web-on-android/index.html","modified":1442537842718,"shasum":"666c5a56035859cab0d8e742cefcb32444404507"},{"_id":"public/2015/07/07/newsletter-1-service/index.html","modified":1442537842735,"shasum":"ce98f5518b20d954c9e7b885023a4c2f89a4104e"},{"_id":"public/2015/07/07/learn-flexbox/index.html","modified":1442537842746,"shasum":"d244829ac8dd027331a09ca64929e3d8f7d89d80"},{"_id":"public/2015/07/02/communicate-between-controllers/index.html","modified":1442537842756,"shasum":"9a6b896b5fdf7b4c818f337f8d58d541edc54fbe"},{"_id":"public/2015/07/01/proxy-for-mobile/index.html","modified":1442537842766,"shasum":"5e613fa3b270a3d6f2c4b7b7637f5fd5307db97e"},{"_id":"public/2015/06/30/source-of-JS-Library/index.html","modified":1442537842777,"shasum":"71c806c478527db7714750a6e6f0b0b71cce668a"},{"_id":"public/2015/06/26/css-animation-practice-1/index.html","modified":1442537842787,"shasum":"6620a521caeda31e8fa1a23c56823570a41b2193"},{"_id":"public/2015/06/23/learn-css-part-two/index.html","modified":1442537842798,"shasum":"7a42d404ab26712aa622985479b0e6400e8f3d76"},{"_id":"public/2015/06/19/plugin-for-Gulp/index.html","modified":1442537842812,"shasum":"18047d8f6c8bdf7be2af2c8851399e1e8e483ca5"},{"_id":"public/2015/06/19/directive-lazy-load/index.html","modified":1442537842826,"shasum":"4c23051449a7e6ce17e39a4b0ee9b3579ec7d60b"},{"_id":"public/2015/06/18/learn-css-part-one/index.html","modified":1442537842839,"shasum":"edb4c8b551bd14a256b721fb025b893b3cc726ad"},{"_id":"public/2015/06/11/hexo/index.html","modified":1442537842851,"shasum":"54d902415b242e353925951f9198fb24235c7ca6"},{"_id":"public/2015/06/11/hello-world/index.html","modified":1442537842860,"shasum":"95d2d67bf8e65838ec7e442326d3962b6903a503"},{"_id":"public/archives/index.html","modified":1442537842872,"shasum":"15751416f7a118d2d659655d08de84360f33b5d6"},{"_id":"public/archives/page/2/index.html","modified":1442537842881,"shasum":"d4165f53934469b81edac0ba134bd147df0bec8d"},{"_id":"public/archives/2015/index.html","modified":1442537842890,"shasum":"f2b1ea4b29a4859d382a52e41aa43dcd878bb760"},{"_id":"public/archives/2015/page/2/index.html","modified":1442537842902,"shasum":"7496dafdf1816fca01063db07706d58687d16bc2"},{"_id":"public/archives/2015/06/index.html","modified":1442537842914,"shasum":"59ffb68ff7c27ff7c60d6447d8a86b34a2bfc55c"},{"_id":"public/archives/2015/07/index.html","modified":1442537842924,"shasum":"566450cf3491d7f1398d372f4afc32096d9c6426"},{"_id":"public/archives/2015/08/index.html","modified":1442537842932,"shasum":"ef4ddc162bb8570280affd63968ddeb934a60db5"},{"_id":"public/archives/2015/09/index.html","modified":1442537842941,"shasum":"2b8ec067a5ac057c3174d60a1204a873645d1a59"},{"_id":"public/categories/angularjs/index.html","modified":1442537842950,"shasum":"fd9717c5d7803cb37a8b86683421a38493d4ade9"},{"_id":"public/categories/life/index.html","modified":1442537842958,"shasum":"aa03585a16a034a14b1e921a7f0df1b993d54980"},{"_id":"public/categories/javascript/index.html","modified":1442537842967,"shasum":"dbaaf3c987e51b260a44de34edc37a65f0bac6d9"},{"_id":"public/categories/Tools/index.html","modified":1442537842975,"shasum":"956553e42e7ca31fb2cf8fe3437bf9c74c7f42d4"},{"_id":"public/categories/css/index.html","modified":1442537842988,"shasum":"7905bc98168b01b139666a295e4a858c0402edf2"},{"_id":"public/categories/ionic/index.html","modified":1442537842996,"shasum":"7febe370fb2753ec4a8a420fb81243b3344aaae2"},{"_id":"public/categories/experience/index.html","modified":1442537843004,"shasum":"eadc631e248f6b267b7b038bca89a33625f8e6d0"},{"_id":"public/index.html","modified":1442537843024,"shasum":"e219aed33c048112ef7555dadd849cb3dfa43eb2"},{"_id":"public/page/2/index.html","modified":1442537843040,"shasum":"e040573e70aa84b3ba3a187282edfe1fb9bd2b92"},{"_id":"public/tags/angularjs/index.html","modified":1442537843048,"shasum":"7e8e201d9ab70933a9a21a79b2a5b7fba276bf16"},{"_id":"public/tags/javascript/index.html","modified":1442537843060,"shasum":"1a718c8610395a22ad4d659db4e2df5808946791"},{"_id":"public/tags/experience/index.html","modified":1442537843070,"shasum":"62f3cb0134287229d7a895bc77af6312d53a9f8e"},{"_id":"public/tags/life/index.html","modified":1442537843079,"shasum":"b54f5f3668806a419a098b306545cb53604c216f"},{"_id":"public/tags/svg/index.html","modified":1442537843087,"shasum":"8fc9ccee290740c4cf65b8272a956210256a6c23"},{"_id":"public/tags/canvas/index.html","modified":1442537843096,"shasum":"ea05957ac6043827c85f67bc0be737c68a3f6372"},{"_id":"public/tags/libray/index.html","modified":1442537843104,"shasum":"20a5a782b6ea68c45293eb2cf91e60a7154b5706"},{"_id":"public/tags/animation/index.html","modified":1442537843112,"shasum":"687f756f716ab2ca4e245196ba997cedf15f78d3"},{"_id":"public/tags/frent-end/index.html","modified":1442537843120,"shasum":"45b81d87cccdcda00847e07b558e210bda44a7f7"},{"_id":"public/tags/javascipt/index.html","modified":1442504576896,"shasum":"aeeb453813c1c36d2f54104363356a37492a1476"},{"_id":"public/tags/tool/index.html","modified":1442537843128,"shasum":"78d96dab2e1ef725821c97cf4a70d2fedca8fa91"},{"_id":"public/tags/webapp/index.html","modified":1442537843136,"shasum":"0807c0c3b063a8177b069475210e86dd7732de38"},{"_id":"public/tags/gasmark/index.html","modified":1442537843148,"shasum":"6c50c033e8e803df517a9dc4fcb02a7d67aef69d"},{"_id":"public/tags/charles/index.html","modified":1442537843158,"shasum":"1298fbeecbdfbe4a894164c4a65020da4ee65c21"},{"_id":"public/tags/gulp/index.html","modified":1442537843168,"shasum":"d302bc418ec467f1b4f08245e9961f38eb69fdc3"},{"_id":"public/tags/plugin/index.html","modified":1442537843176,"shasum":"72541f1abb4fa2afceff52e5bc274a50fc1d6559"},{"_id":"public/tags/service/index.html","modified":1442537843184,"shasum":"9f559485a5c2fe299068641d7f65498d20360c5d"},{"_id":"public/tags/css/index.html","modified":1442537843192,"shasum":"49311b0400761b6c4d7bef6a1af1c5181bd47ecc"},{"_id":"public/tags/flexbox/index.html","modified":1442537843201,"shasum":"2e8bd01b1759bd1bca00e3b35be68b334710da92"},{"_id":"public/tags/弹性布局/index.html","modified":1442537843208,"shasum":"1567acaded34fe8ff7e69b6a969f3a7706532c59"},{"_id":"public/tags/front-end/index.html","modified":1442537843218,"shasum":"193181d582f37b23ec6b117223896d2592de843b"},{"_id":"public/tags/ionic/index.html","modified":1442537843229,"shasum":"ca83786d4fdd1bd09913dcc4448968c82abd9eb3"},{"_id":"public/tags/cmd/index.html","modified":1442537843236,"shasum":"3c702b7fbd98c956fcbfccbac36b7ceacc7991cf"},{"_id":"public/tags/github/index.html","modified":1442537843246,"shasum":"008af29f59f45e6a6d62a469d41fcb79c1c34647"},{"_id":"public/tags/hexo/index.html","modified":1442537843254,"shasum":"fa98bc244fa5ae5ee962314b1ab75a9185011afd"},{"_id":"public/tags/directive/index.html","modified":1442537843262,"shasum":"fa154960b396dad78712708a7abc76e992e32cff"},{"_id":"public/tags/debug/index.html","modified":1442537843271,"shasum":"af470f239542f85c0c895fd9213fa38ca1b48fad"},{"_id":"public/tags/chrome/index.html","modified":1442537843280,"shasum":"2a3f4ad962d1b18d0491253f1e939c85cd6ea336"},{"_id":"public/tags/css3/index.html","modified":1442537843288,"shasum":"4dc8dc4b99f402bc22abe78a144feeb2dd01b92e"}],"Category":[{"name":"angularjs","_id":"cieodz8lv0001zt4o13yb89fr"},{"name":"life","_id":"cieodz8mj000czt4o8f65e959"},{"name":"javascript","_id":"cieodz8mm000hzt4ovv89cdh8"},{"name":"Tools","_id":"cieodz8mr000yzt4otkpt2ea4"},{"name":"css","_id":"cieodz8n2001mzt4ok9ihjbg7"},{"name":"ionic","_id":"cieodz8nd0026zt4ouaox910k"},{"name":"experience","_id":"cieodz8ni002dzt4oy7s5hra6"}],"Data":[],"Page":[{"title":"袁旭佳的简历","date":"2015-06-11T14:09:16.000Z","_content":"#袁旭佳的简历\n\n#个人信息\n\n- 袁旭佳/男/1988\n- 毕业于浙江理工大学\n- 工作年限: 5年+\n- 个人blog: [yuanxj.net](http://www.yuanxj.net)\n- 邮箱:\t\n\t*\taaronyuan1024@163.com(常用)\n\t*\txuanyuanziruo@gmail.com(定时查看)\n- 电话：[13691513508](tel:13691513508)\n- 期望职位: 前端开发，.net全栈\n- 期望城市: 北京\n\n\n---\n\n#工作经历\n\n##普汇大通（2014年8月 ~ 2015年3月）\n\n###OA系统\n公司内部OA办公系统，主要功能有工作流程申请，报销，审批等流程，公司内部文档管理，公告发布，工作日志记录等模块。\n\n我的职责有：\n\n*\t使用bootstrap进行页面UI开发\n*\t使用angularjs完成界面交互\n*\t熟练使用coffeescript跟typescript提升js开发速度跟质量\n\n成长与收获：\n\n1.\t在公司线下业务系统(PMS,类似ERP系统)担任基础框架设计以及开发，框架使用者为组内成员，框架主要实现通用模块的抽象封装;使用技术有:WCF, ORM \r2.\t在线上平台指导业务模块设计以及实现，负责前端交互开发以及优化，业务开发，框架设计以及优化；使用的技术有:MVC,LinQ,Angular.js,Sea.js \r3.\t在这里进步加强了自己对面向对象的理解以及项目设计的能力，同时进一步提升了自己的前端技能。\n\n\n\n##上海惠普(HPIT-GADSC) (2013年5月 ~ 2014年7月)\n\n###Sale Analytics Project\nSales Analytics项目(简称SA)这是个BI项目用销售业绩预测，用户为惠普各个区域销售代表、销售经理以及总监，通过收集整理各个区域的销售信息，实现在线计算，在线统计，在线报表浏览，销售业绩预测。\n\n主要职责:\n\n*\t使用MVC+Entity Framework进行网站页面开发\n*\t使用jquery处理兼容性，使用kendoUI作为页面\n*\tSea.js作为模块化开发基础，根据业务熟练的进行插件开发主要功能插件\n*\t熟练使用coffeescript开发，提升开发速度以及生成标准的js文件\n\n成长与收获：\n\n1.\t项目采用MVC，sea.js模块发开发方式，根据产品原型进行页面开发到页面交互开发，后端数据库设计以及业务逻辑开发。喜欢使用coffeescript进行js开发。 在职期间学习了Node.js，基于Office Online开发了文档在线预览应用。 \r2.\t使用的技术有MVC,EntityFramework,KendoUI,Knockout.js,进行页面开发以及后台功能实。 \r3.\t在项目中进步提升了自己的开发技能以及规范的软件开发流程。\n\n\n##杭州维库信息科技有限公司(2010年3月 ~ 2013年5月)\n\n###维库b2b平台(www.weiku.com)\n维库综合平台(www.weiku.com)是一个全球性的企业对企业（B2B）的贸易平台，该项目自2010.9.3日成立，目前已经发展2年有余，平台运营期间依托庞大的数据量以及SEO流量一直上升，自我离职时流量突破8万IP,在项目中承担起平台数据支撑，功能开发的主要任务。\n\n主要职责：\n\n*\t项目前期使用JQuery对会员助手模块(会员信息管理，产品信息管理)\n*\t参与数据结构设计，后期参与数据库性能优化\n*\t开发数据采集程序，负责项目数据分析，数据处理，数据维护，为平台提供数据支撑\n\n成长与收获：\n\n1.\t熟练使用JQuery对会员助手模块开发并学会了开发jQuery插件。 \r2.\t参与产品分类产品属性数据结构设计，提升了自己数据库设计能力以及性能优化能力。 \r3.\t负责项目数据分析，数据处理，数据维护。期间开发采集程序，为了提高采集效率利用OOP思想开发出多线程采集框架，提高了采集效率以及程序开发效率。 \r4.\t截止离开项目时为平台提供有效产品数据1000万，会员信息70万，提升了自己处理大量数据的实战经验。\n\n###电子市场(www.dzsc.com)旺铺系统\n维库旺铺，是电子市场(www.dzsc.com)为打造全新网上店铺，开启网商新时代、新网店、新机遇，让客户的旺铺成为网上最旺的商铺，推出的一款产品，具有网站栏目、颜色、背景、图片、字体等均可以自由切换，支持中英文双语言，支持批量、粘贴和逐条上传库存的方式方便管理产品等小型企业站规模的一项服务 [参考专题](http://www.dzsc.com/zuanti/wangpu/)\n\n主要职责:\n\n*\t使用JQeury及其插件对页面验证以及功能开发\n*\t依照SEO优化策略对页面数据进行绑定 \n*\t会员后台功能开发：会员模板管理，模板详细信息设置，信息修改，产品管理，新闻管理\n\n成长与收获：\n\n1.\t毕业后的第一个项目，更多的是实战了自己的web开发技能，使用jQueruy熟练的进行页面开发 \r2.\t锻炼了自己asp.net对页面进行开发的技能。  \n\n##技术\n*\tjavascript\n\t\n\tIonic, Angular.JS, Node.Js, Sea.Js, Require.Js, Jquery.Js\n\t\n\tTypeScript, CoffeeScript\n\t\t\n*\tcss\n*\t\n\tcss2.0 css3.0\n\n\tSASS\n\t\n*\tC#\n\t\n\tASP.NET, MVC 4.0, EntityFrameWork5.0\n\n\n","source":"yuanxj/index.md","raw":"title: 袁旭佳的简历\ndate: 2015-06-11 22:09:16\n---\n#袁旭佳的简历\n\n#个人信息\n\n- 袁旭佳/男/1988\n- 毕业于浙江理工大学\n- 工作年限: 5年+\n- 个人blog: [yuanxj.net](http://www.yuanxj.net)\n- 邮箱:\t\n\t*\taaronyuan1024@163.com(常用)\n\t*\txuanyuanziruo@gmail.com(定时查看)\n- 电话：[13691513508](tel:13691513508)\n- 期望职位: 前端开发，.net全栈\n- 期望城市: 北京\n\n\n---\n\n#工作经历\n\n##普汇大通（2014年8月 ~ 2015年3月）\n\n###OA系统\n公司内部OA办公系统，主要功能有工作流程申请，报销，审批等流程，公司内部文档管理，公告发布，工作日志记录等模块。\n\n我的职责有：\n\n*\t使用bootstrap进行页面UI开发\n*\t使用angularjs完成界面交互\n*\t熟练使用coffeescript跟typescript提升js开发速度跟质量\n\n成长与收获：\n\n1.\t在公司线下业务系统(PMS,类似ERP系统)担任基础框架设计以及开发，框架使用者为组内成员，框架主要实现通用模块的抽象封装;使用技术有:WCF, ORM \r2.\t在线上平台指导业务模块设计以及实现，负责前端交互开发以及优化，业务开发，框架设计以及优化；使用的技术有:MVC,LinQ,Angular.js,Sea.js \r3.\t在这里进步加强了自己对面向对象的理解以及项目设计的能力，同时进一步提升了自己的前端技能。\n\n\n\n##上海惠普(HPIT-GADSC) (2013年5月 ~ 2014年7月)\n\n###Sale Analytics Project\nSales Analytics项目(简称SA)这是个BI项目用销售业绩预测，用户为惠普各个区域销售代表、销售经理以及总监，通过收集整理各个区域的销售信息，实现在线计算，在线统计，在线报表浏览，销售业绩预测。\n\n主要职责:\n\n*\t使用MVC+Entity Framework进行网站页面开发\n*\t使用jquery处理兼容性，使用kendoUI作为页面\n*\tSea.js作为模块化开发基础，根据业务熟练的进行插件开发主要功能插件\n*\t熟练使用coffeescript开发，提升开发速度以及生成标准的js文件\n\n成长与收获：\n\n1.\t项目采用MVC，sea.js模块发开发方式，根据产品原型进行页面开发到页面交互开发，后端数据库设计以及业务逻辑开发。喜欢使用coffeescript进行js开发。 在职期间学习了Node.js，基于Office Online开发了文档在线预览应用。 \r2.\t使用的技术有MVC,EntityFramework,KendoUI,Knockout.js,进行页面开发以及后台功能实。 \r3.\t在项目中进步提升了自己的开发技能以及规范的软件开发流程。\n\n\n##杭州维库信息科技有限公司(2010年3月 ~ 2013年5月)\n\n###维库b2b平台(www.weiku.com)\n维库综合平台(www.weiku.com)是一个全球性的企业对企业（B2B）的贸易平台，该项目自2010.9.3日成立，目前已经发展2年有余，平台运营期间依托庞大的数据量以及SEO流量一直上升，自我离职时流量突破8万IP,在项目中承担起平台数据支撑，功能开发的主要任务。\n\n主要职责：\n\n*\t项目前期使用JQuery对会员助手模块(会员信息管理，产品信息管理)\n*\t参与数据结构设计，后期参与数据库性能优化\n*\t开发数据采集程序，负责项目数据分析，数据处理，数据维护，为平台提供数据支撑\n\n成长与收获：\n\n1.\t熟练使用JQuery对会员助手模块开发并学会了开发jQuery插件。 \r2.\t参与产品分类产品属性数据结构设计，提升了自己数据库设计能力以及性能优化能力。 \r3.\t负责项目数据分析，数据处理，数据维护。期间开发采集程序，为了提高采集效率利用OOP思想开发出多线程采集框架，提高了采集效率以及程序开发效率。 \r4.\t截止离开项目时为平台提供有效产品数据1000万，会员信息70万，提升了自己处理大量数据的实战经验。\n\n###电子市场(www.dzsc.com)旺铺系统\n维库旺铺，是电子市场(www.dzsc.com)为打造全新网上店铺，开启网商新时代、新网店、新机遇，让客户的旺铺成为网上最旺的商铺，推出的一款产品，具有网站栏目、颜色、背景、图片、字体等均可以自由切换，支持中英文双语言，支持批量、粘贴和逐条上传库存的方式方便管理产品等小型企业站规模的一项服务 [参考专题](http://www.dzsc.com/zuanti/wangpu/)\n\n主要职责:\n\n*\t使用JQeury及其插件对页面验证以及功能开发\n*\t依照SEO优化策略对页面数据进行绑定 \n*\t会员后台功能开发：会员模板管理，模板详细信息设置，信息修改，产品管理，新闻管理\n\n成长与收获：\n\n1.\t毕业后的第一个项目，更多的是实战了自己的web开发技能，使用jQueruy熟练的进行页面开发 \r2.\t锻炼了自己asp.net对页面进行开发的技能。  \n\n##技术\n*\tjavascript\n\t\n\tIonic, Angular.JS, Node.Js, Sea.Js, Require.Js, Jquery.Js\n\t\n\tTypeScript, CoffeeScript\n\t\t\n*\tcss\n*\t\n\tcss2.0 css3.0\n\n\tSASS\n\t\n*\tC#\n\t\n\tASP.NET, MVC 4.0, EntityFrameWork5.0\n\n\n","updated":"2015-06-19T04:00:57.000Z","path":"yuanxj/index.html","comments":1,"layout":"page","_id":"cieodz8me0009zt4o1nunskzf"},{"title":"directive","date":"2015-07-13T06:33:58.000Z","categories":null,"tags":null,"_content":"\n##定义指令\n\n*\t写法一\n\t\n\t```\n\tangular.module('myApp', [])\n\t  .directive('myDirective', function($timeout) {\n\t  \t//定义指令\n\t  });\n\t```\n\n*\t写法二\n\t\n\t```\n\tangular.module('myApp', [])\n\t  .directive('myDirective', ['$timeout', function($timeout){\n\t  \t//定义指令\n\t  }]);\n\t```\n\n\n\n\n\n\n\n\n\n\n\n\n参考资料:\n*\t[AngularJs学习笔记--directive](http://www.cnblogs.com/lcllao/archive/2012/09/09/2677190.html)\n*\t[Creating Custom Directives](https://docs.angularjs.org/guide/directive)\n\n","source":"directive.md","raw":"title: directive\ndate: 2015-07-13 14:33:58\ncategories:\ntags:\n---\n\n##定义指令\n\n*\t写法一\n\t\n\t```\n\tangular.module('myApp', [])\n\t  .directive('myDirective', function($timeout) {\n\t  \t//定义指令\n\t  });\n\t```\n\n*\t写法二\n\t\n\t```\n\tangular.module('myApp', [])\n\t  .directive('myDirective', ['$timeout', function($timeout){\n\t  \t//定义指令\n\t  }]);\n\t```\n\n\n\n\n\n\n\n\n\n\n\n\n参考资料:\n*\t[AngularJs学习笔记--directive](http://www.cnblogs.com/lcllao/archive/2012/09/09/2677190.html)\n*\t[Creating Custom Directives](https://docs.angularjs.org/guide/directive)\n\n","updated":"2015-07-19T13:49:44.000Z","path":"directive.html","comments":1,"layout":"page","_id":"cieodz8mh000azt4o1yhsy6nv"}],"Post":[{"title":"angular.JS的controller之间如何正确的通信","date":"2015-07-02T01:44:04.000Z","_content":"AngularJS中的controller是个函数，用来向视图的作用域（$scope）添加额外的功能，我们用它来给作用域对象设置初始状态，并添加自定义行为。\n\n当我们在创建新的控制器时，angularJS会帮我们生成并传递一个新的$scope对象给这个controller,在angularJS应用的中的任何一个部分，都有父级作用域的存在，顶级就是ng-app所在的层级，它的父级作用域就是$rootScope。\n\n每个$scope的$root指向$rootScope, $cope.$parent指向父级作用域。\n\ncotroller之间的通信本质上是当前的controller所在的$scope如何跟其他controller上的$scope进行通信。\n\n通常有3中解决方式：\n\n*\t利用作用域继承的原理，子控制器访问父级控制器中的内容。\n*\t使用angularJS中的事件，也就是使用$on,$emit,$broadcast进行消息传递\n*\t使用angularJS中的服务\n\n##第一种方式\n即作用域嵌套作用域，有一定的使用限制，需要作用域嵌套起来，在实际开发中这种场景相对比较少，但也不是没有，这种方式更简单直接。\n\nangularJS中默认情况下，当前作用域中无法找到某个属性时，就会在父级作用域中进行查找，若找不到直至查找到$rootScope。 如果在$rootScope中也无法找到程序依旧运行，但视图不会更新。\n\n**示例**\n\n```\n\t//Javascript\n\tapp.controller('ParentController', function($scope) { \n\t\t$scope.person = {greeted: false};\r\t});\r\tapp.controller('ChildController', function($scope) {\r\t \t$scope.sayHello = function() {\r    \t     $scope.person.name = 'Ari Lerner';\r    \t};\r\t});\n\t//HTML\n\t <div ng-controller=\"ParentController\">\r       <div ng-controller=\"ChildController\">\r         <a ng-click=\"sayHello()\">Say hello</a>\r       </div>\r       {{ person }}\r     </div>\n\t//result\r    {\"greeted\":true, \"name\": \"Ari Lerner\"}\n\n```\n\n##第二种方式\n因为作用域是有层次的，所以可以利用作用域链传递事件。\n\n传递事件有2种方式：\n*\t$broadcast: 触发的事件要通知整个事件系统（允许任意作用域处理这个事件）就要向下传播。\n*\t$emit: 如果要提醒一个全局模块，需要通知更高层次的作用域时（例如$rootscope）需要把事件向上传递。\n\n作用域上使用$on进行事件监听。\n\n**示例**\n\n```\n\tapp.controller('ParentController', function($scope) { \n\t\t$scope.$on('$fromSubControllerClick', function(e,data){\n\t\t\tconsole.log(data); // hello\n\t\t});\n\t});\n\tapp.controller('ChildController', function($scope) {\n\t \t$scope.sayHello = function() {\n\t \t\t$scope.$emit('$fromSubControllerClick','hello');\n    \t};\n\t});\n\t//HTML\n\t <div ng-controller=\"ParentController\">\n       <div ng-controller=\"ChildController\">\n         <a ng-click=\"sayHello()\">Say hello</a>\n       </div>\n     </div>\n```\n\n在这里想要说的另外一个问题就是事件传播的性能问题，$broadcast+$on的方式回通知所有的子作用域，这里就会有性能问题，所以推荐使用$emit+$on的方式,为了进一步提升性能，定义的事件处理函数要在作用域销毁时一起释放掉。\n\n使用$emit+$on的方式需要我们将事件监听绑定在$rootScope上，例如：\n\n```\nangular\n    .module('MyApp')\n    .controller('MyController', ['$scope', '$rootScope', function MyController($scope, $rootScope) {\n\n            var unbind = $rootScope.$on('someComponent.someCrazyEvent', function(){\n                console.log('foo');\n            });\n\n            $scope.$on('$destroy', unbind);\n        }\n    ]);\n```\n\n但是这种方式有点繁琐，定义多个事件处理函数时整个人都不好了，所以我们来改进一下\n\n利用装饰器来定义一个新的事件绑定函数：\n\n```\nangular\n    .module('MyApp')\n    .config(['$provide', function($provide){\n        $provide.decorator('$rootScope', ['$delegate', function($delegate){\n\n            Object.defineProperty($delegate.constructor.prototype, '$onRootScope', {\n                value: function(name, listener){\n                    var unsubscribe = $delegate.$on(name, listener);\n                    this.$on('$destroy', unsubscribe);\n\n                    return unsubscribe;\n                },\n                enumerable: false\n            });\n\n\n            return $delegate;\n        }]);\n    }]);\n```\n\n那么我们在控制器中定义事件处理函数时：\n\n```\nangular\n    .module('MyApp')\n    .controller('MyController', ['$scope', function MyController($scope) {\n\n            $scope.$onRootScope('someComponent.someCrazyEvent', function(){\n                console.log('foo');\n            });\n        }\n    ]);\n```\n\n**个人强烈推荐此种做法**\n\n\n##第三种方式\n利用angularJS中service单例模式的特性，服务(service)提供了一种能在应用的整个生命周期内保持数据的方式，能够在控制器之间进行通信，且能保证数据的一致性。\n\n一般我们都会封装server来为应用提供访问数据的接口，或者跟远程进行数据交互。\n\n**示例**\n\n```\nvar myApp = angular.module(\"myApp\", []);\nmyApp.factory('Data', function() {\n  return {\n    name: \"Ting\"\n  }\n});\nmyApp.controller('FirstCtrl', function($scope, Data) {\n  $scope.data = Data;\n\n  $scope.setName = function() {\n    Data.name = \"Jack\";\n  }\n});\n\nmyApp.controller('SecondCtrl', function($scope, Data) {\n  $scope.data = Data;\n\n  $scope.setName = function() {\n    Data.name = \"Moby\";\n  }\n});\n```\n\n\n\n\n\n##参考资料\n\n*\t[whats the correct way to conmmunicate between controllers](http://stackoverflow.com/questions/11252780/whats-the-correct-way-to-communicate-between-controllers-in-angularjs/19498009#19498009)\n\n*\t[controller间共享数据](http://www.angularjs.cn/A07b)\n*\t[controller间如何通信](http://segmentfault.com/a/1190000000639592)\n\n\n","source":"_posts/communicate-between-controllers.md","raw":"title: angular.JS的controller之间如何正确的通信\ndate: 2015-07-02 09:44:04\ncategories: angularjs\ntags: [angularjs,javascript,experience]\n---\nAngularJS中的controller是个函数，用来向视图的作用域（$scope）添加额外的功能，我们用它来给作用域对象设置初始状态，并添加自定义行为。\n\n当我们在创建新的控制器时，angularJS会帮我们生成并传递一个新的$scope对象给这个controller,在angularJS应用的中的任何一个部分，都有父级作用域的存在，顶级就是ng-app所在的层级，它的父级作用域就是$rootScope。\n\n每个$scope的$root指向$rootScope, $cope.$parent指向父级作用域。\n\ncotroller之间的通信本质上是当前的controller所在的$scope如何跟其他controller上的$scope进行通信。\n\n通常有3中解决方式：\n\n*\t利用作用域继承的原理，子控制器访问父级控制器中的内容。\n*\t使用angularJS中的事件，也就是使用$on,$emit,$broadcast进行消息传递\n*\t使用angularJS中的服务\n\n##第一种方式\n即作用域嵌套作用域，有一定的使用限制，需要作用域嵌套起来，在实际开发中这种场景相对比较少，但也不是没有，这种方式更简单直接。\n\nangularJS中默认情况下，当前作用域中无法找到某个属性时，就会在父级作用域中进行查找，若找不到直至查找到$rootScope。 如果在$rootScope中也无法找到程序依旧运行，但视图不会更新。\n\n**示例**\n\n```\n\t//Javascript\n\tapp.controller('ParentController', function($scope) { \n\t\t$scope.person = {greeted: false};\r\t});\r\tapp.controller('ChildController', function($scope) {\r\t \t$scope.sayHello = function() {\r    \t     $scope.person.name = 'Ari Lerner';\r    \t};\r\t});\n\t//HTML\n\t <div ng-controller=\"ParentController\">\r       <div ng-controller=\"ChildController\">\r         <a ng-click=\"sayHello()\">Say hello</a>\r       </div>\r       {{ person }}\r     </div>\n\t//result\r    {\"greeted\":true, \"name\": \"Ari Lerner\"}\n\n```\n\n##第二种方式\n因为作用域是有层次的，所以可以利用作用域链传递事件。\n\n传递事件有2种方式：\n*\t$broadcast: 触发的事件要通知整个事件系统（允许任意作用域处理这个事件）就要向下传播。\n*\t$emit: 如果要提醒一个全局模块，需要通知更高层次的作用域时（例如$rootscope）需要把事件向上传递。\n\n作用域上使用$on进行事件监听。\n\n**示例**\n\n```\n\tapp.controller('ParentController', function($scope) { \n\t\t$scope.$on('$fromSubControllerClick', function(e,data){\n\t\t\tconsole.log(data); // hello\n\t\t});\n\t});\n\tapp.controller('ChildController', function($scope) {\n\t \t$scope.sayHello = function() {\n\t \t\t$scope.$emit('$fromSubControllerClick','hello');\n    \t};\n\t});\n\t//HTML\n\t <div ng-controller=\"ParentController\">\n       <div ng-controller=\"ChildController\">\n         <a ng-click=\"sayHello()\">Say hello</a>\n       </div>\n     </div>\n```\n\n在这里想要说的另外一个问题就是事件传播的性能问题，$broadcast+$on的方式回通知所有的子作用域，这里就会有性能问题，所以推荐使用$emit+$on的方式,为了进一步提升性能，定义的事件处理函数要在作用域销毁时一起释放掉。\n\n使用$emit+$on的方式需要我们将事件监听绑定在$rootScope上，例如：\n\n```\nangular\n    .module('MyApp')\n    .controller('MyController', ['$scope', '$rootScope', function MyController($scope, $rootScope) {\n\n            var unbind = $rootScope.$on('someComponent.someCrazyEvent', function(){\n                console.log('foo');\n            });\n\n            $scope.$on('$destroy', unbind);\n        }\n    ]);\n```\n\n但是这种方式有点繁琐，定义多个事件处理函数时整个人都不好了，所以我们来改进一下\n\n利用装饰器来定义一个新的事件绑定函数：\n\n```\nangular\n    .module('MyApp')\n    .config(['$provide', function($provide){\n        $provide.decorator('$rootScope', ['$delegate', function($delegate){\n\n            Object.defineProperty($delegate.constructor.prototype, '$onRootScope', {\n                value: function(name, listener){\n                    var unsubscribe = $delegate.$on(name, listener);\n                    this.$on('$destroy', unsubscribe);\n\n                    return unsubscribe;\n                },\n                enumerable: false\n            });\n\n\n            return $delegate;\n        }]);\n    }]);\n```\n\n那么我们在控制器中定义事件处理函数时：\n\n```\nangular\n    .module('MyApp')\n    .controller('MyController', ['$scope', function MyController($scope) {\n\n            $scope.$onRootScope('someComponent.someCrazyEvent', function(){\n                console.log('foo');\n            });\n        }\n    ]);\n```\n\n**个人强烈推荐此种做法**\n\n\n##第三种方式\n利用angularJS中service单例模式的特性，服务(service)提供了一种能在应用的整个生命周期内保持数据的方式，能够在控制器之间进行通信，且能保证数据的一致性。\n\n一般我们都会封装server来为应用提供访问数据的接口，或者跟远程进行数据交互。\n\n**示例**\n\n```\nvar myApp = angular.module(\"myApp\", []);\nmyApp.factory('Data', function() {\n  return {\n    name: \"Ting\"\n  }\n});\nmyApp.controller('FirstCtrl', function($scope, Data) {\n  $scope.data = Data;\n\n  $scope.setName = function() {\n    Data.name = \"Jack\";\n  }\n});\n\nmyApp.controller('SecondCtrl', function($scope, Data) {\n  $scope.data = Data;\n\n  $scope.setName = function() {\n    Data.name = \"Moby\";\n  }\n});\n```\n\n\n\n\n\n##参考资料\n\n*\t[whats the correct way to conmmunicate between controllers](http://stackoverflow.com/questions/11252780/whats-the-correct-way-to-communicate-between-controllers-in-angularjs/19498009#19498009)\n\n*\t[controller间共享数据](http://www.angularjs.cn/A07b)\n*\t[controller间如何通信](http://segmentfault.com/a/1190000000639592)\n\n\n","slug":"communicate-between-controllers","published":1,"updated":"2015-07-02T01:46:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cieodz8lq0000zt4o7kmm0ooz"},{"title":"加班的感触","date":"2015-09-17T15:10:16.000Z","_content":"早上看早一篇文章[我是程序员，加班就是我活该吗？](http://www.jianshu.com/p/14f8e4bfc715)\n我也是程序员，工作也有好几年了，算有了一些生活阅历，发表一下自己的想法。\n\n说实话，对目前的行业状态来讲，没有那个公司不加班，公司要出业绩要有收益产出才能养活公司的员工，创业的朋友肯定知道市场上的竞争到底有多激烈，也可想而知每个公司都有自己的压力。\n\n所以首先明白一点，当你想找工作的时候，请做好为公司贡献价值，这么说感觉自己十足是被公司给洗脑了，其实自己只是喜欢自己编程的职业，作为有职业道德人来讲，努力完成自己的工作是应该，考虑各个公司的不同，加班就产生了，你看BAT之流的那些大公司加班也不是没有，而且也不见得比普通公司强度小。\n\n回头从自己的职业生涯看看，供职的每个公司都加班，连续加班一个月的时候也有，仔细想想加班的时候的确是累，但自己却从未抱怨过公司：\n一是因为公司是自己选择的，当初找工作时就看上人家公司了，公司也认可了自己，所以选择自己喜欢的。\n二是我一直认为，社会上360行，其实那个行业都一样，没有那个职位是活少钱多的，那么职业，如果现在的职业干着不舒服，那就换个职业，或者换个公司吧，人生不就是在不停的找寻的过程吗。年轻人不应该干点自己喜欢的事儿吗，让自己心委屈了，何必呢。\n\n说了这么多也不是说自己就是贱，喜欢被压榨，是因为我清楚的知道，我还年轻，实力不够，能力还需要锻炼，阅历还不够丰富，人脉还不够广，积累是每个人都要做的一件事情，我想每个人心里都有个当老板的憧憬吧，所以低下头默默的努力就是。\n\n所以个人对于加班不太感冒，只要公司在我有事儿的时候给假就好，世界那么大，公司那么多，想出去看看也好。","source":"_posts/working.md","raw":"title: 加班的感触\ndate: 2015-09-17 23:10:16\ncategories: life\ntags: life\n---\n早上看早一篇文章[我是程序员，加班就是我活该吗？](http://www.jianshu.com/p/14f8e4bfc715)\n我也是程序员，工作也有好几年了，算有了一些生活阅历，发表一下自己的想法。\n\n说实话，对目前的行业状态来讲，没有那个公司不加班，公司要出业绩要有收益产出才能养活公司的员工，创业的朋友肯定知道市场上的竞争到底有多激烈，也可想而知每个公司都有自己的压力。\n\n所以首先明白一点，当你想找工作的时候，请做好为公司贡献价值，这么说感觉自己十足是被公司给洗脑了，其实自己只是喜欢自己编程的职业，作为有职业道德人来讲，努力完成自己的工作是应该，考虑各个公司的不同，加班就产生了，你看BAT之流的那些大公司加班也不是没有，而且也不见得比普通公司强度小。\n\n回头从自己的职业生涯看看，供职的每个公司都加班，连续加班一个月的时候也有，仔细想想加班的时候的确是累，但自己却从未抱怨过公司：\n一是因为公司是自己选择的，当初找工作时就看上人家公司了，公司也认可了自己，所以选择自己喜欢的。\n二是我一直认为，社会上360行，其实那个行业都一样，没有那个职位是活少钱多的，那么职业，如果现在的职业干着不舒服，那就换个职业，或者换个公司吧，人生不就是在不停的找寻的过程吗。年轻人不应该干点自己喜欢的事儿吗，让自己心委屈了，何必呢。\n\n说了这么多也不是说自己就是贱，喜欢被压榨，是因为我清楚的知道，我还年轻，实力不够，能力还需要锻炼，阅历还不够丰富，人脉还不够广，积累是每个人都要做的一件事情，我想每个人心里都有个当老板的憧憬吧，所以低下头默默的努力就是。\n\n所以个人对于加班不太感冒，只要公司在我有事儿的时候给假就好，世界那么大，公司那么多，想出去看看也好。","slug":"working","published":1,"updated":"2015-09-17T15:11:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cieodz8mi000bzt4os4dl3e4z"},{"title":"流行的svg/canvas动画库","date":"2015-08-03T05:16:08.000Z","_content":"\n因为需要用到动画，所以收集了一下现在比较流行的一些svg和canvas动画库，收集的不一定很全，主要是一些使用比较多的库。\n\n#SVG\n*\t[SVG.JS](http://svgjs.com/)\n\n\tA lightweight library for manipulating and animating SVG.\n\n\t```\n\t\t// create svg drawing\n        var draw = SVG('drawing')\n        // create image\n        var image = draw.image('images/shade.jpg')\n        image.size(650, 650).y(-150)\n        // create text\n        var text = draw.text('SVG.JS').move(300, 0)\n        text.font({\n          family: 'Source Sans Pro'\n        , size: 180\n        , anchor: 'middle'\n        , leading: 1\n        })\n        // clip image with text\n        image.clipWith(text)\n\t```\n*\t[Snap.svg](http://snapsvg.io/)\n\t\n\tSVG is an excellent way to create interactive, resolution-independent vector graphics that will look great on any size screen. And the Snap.svg JavaScript library makes working with your SVG assets as easy as jQuery makes working with the DOM.\n\t\n\t```\n\t// First lets create our drawing surface out of existing SVG element\n// If you want to create new surface just provide dimensions\n// like s = Snap(800, 600);\nvar s = Snap(\"#svg\");\n// Lets create big circle in the middle:\nvar bigCircle = s.circle(150, 150, 100);\n// By default its black, lets change its attributes\nbigCircle.attr({\n    fill: \"#bada55\",\n    stroke: \"#000\",\n    strokeWidth: 5\n});\n\t```\n\t\t\n*\t[Raphael](http://raphaeljs.com/)\n\t\n\tRaphaël is a small JavaScript library that should simplify your work with vector graphics on the web. If you want to create your own specific chart or image crop and rotate widget, for example, you can achieve it simply and easily with this library.\n\n\t```\n\t// Creates canvas 320 × 200 at 10, 50\nvar paper = Raphael(10, 50, 320, 200);\n// Creates circle at x = 50, y = 40, with radius 10\nvar circle = paper.circle(50, 40, 10);\n// Sets the fill attribute of the circle to red (#f00)\ncircle.attr(\"fill\", \"#f00\");\n// Sets the stroke attribute of the circle to white\ncircle.attr(\"stroke\", \"#fff\");\n\t```\n*\t[bonsai](https://bonsaijs.org/)\n\t\n\tA lightweight graphics library with an intuitive graphics API and an SVG renderer.\n\n\t```\n\t//Draw a 100x200 rectangle to the stage at {0,0}:\nvar r = new Rect(0, 0, 100, 200).addTo(stage);\n//Fill it:\nr.fill('blue');\n//Change your mind... Make it darker:\nr.fill(color('green').darker());\n//Animate it:\nr.animate('400ms', {\n  x: 50,\n  y: 50,\n  width: 200\n});\n\t```\n*\t[vivus](https://maxwellito.github.io/vivus/)\n\t\n\tVivus is a lightweight JavaScript class (with no dependencies) that allows you to animate SVGs, giving them the appearence of being drawn. \n\n*\t[svgweb](https://code.google.com/p/svgweb/)\t\n\n\tSVG Web is a JavaScript library which provides SVG support on many browsers, including Internet Explorer, Firefox, and Safari. Using the library plus native SVG support you can instantly target ~95% of the existing installed web base.\n\t\n\t\n*\t[Processing](http://processingjs.org/)\n\t\n\tProcessing.js is the sister project of the popular Processing visual programming language, designed for the web. Processing.js makes your data visualizations, digital art, interactive animations, educational graphs, video games, etc. work using web standards and without any plug-ins. \n\t\n\t```\n\t// Global variables\nfloat radius = 50.0;\nint X, Y;\nint nX, nY;\nint delay = 16;\n// Setup the Processing Canvas\nvoid setup(){\n  size( 200, 200 );\n  strokeWeight( 10 );\n  frameRate( 15 );\n  X = width / 2;\n  Y = height / 2;\n  nX = X;\n  nY = Y;  \n}\n// Main draw loop\nvoid draw(){  \n  radius = radius + sin( frameCount / 4 );  \n  // Track circle to new destination\n  X+=(nX-X)/delay;\n  Y+=(nY-Y)/delay;  \n  // Fill canvas grey\n  background( 100 );  \n  // Set fill-color to blue\n  fill( 0, 121, 184 );\n  // Set stroke-color white\n  stroke(255);  \n  // Draw circle\n  ellipse( X, Y, radius, radius );                  \n}\n// Set circle's next destination\nvoid mouseMoved(){\n  nX = mouseX;\n  nY = mouseY;  \n}\n\t```\n*\t[Velocity.js](http://julian.com/research/velocity/)\t\n\t\n\tVelocity is an animation engine with the same API as jQuery's $.animate(). It works with and without jQuery. It's incredibly fast, and it features color animation, transforms, loops, easings, SVG support, and scrolling. It is the best of jQuery and CSS transitions combined.\n\t\n\t```\n\t// Animate width, then animate height.\n$(\"div\")\n    .velocity({ width: 75 }, 1500)\n    .velocity({ height: 0 }, 1250);\n\t```\n*\t[jQuery SVG](http://keith-wood.name/svgRef.html)\t\n\t\n\tA jQuery plugin that lets you interact with an SVG canvas.\n\t\n\t```\n\tvar svg = $('#svgintro').svg('get'); \nsvg.circle(130, 75, 50, {fill: 'none', stroke: 'red', strokeWidth: 3});\n\t```\n\n#Canvas\n\n*\t[KineticJS](http://kineticjs.com/)\n\t\n\tKineticJS is a fast, robust, HTML5 Canvas Library that is no longer maintained.\n\n*\t[Fabric](http://fabricjs.com/)\n\n\tFabric.js is a powerful and simple\nJavascript HTML5 canvas library\n\t\n\t```\n\t// reference canvas element (with id=\"c\")\nvar canvasEl = document.getElementById('c');\n// get 2d context to draw on (the \"bitmap\" mentioned earlier)\nvar ctx = canvasEl.getContext('2d');\n// set fill color of context\nctx.fillStyle = 'red';\n// create rectangle at a 100,100 point, with 20x20 dimensions\nctx.fillRect(100, 100, 20, 20);\n\t```\n*\t[Paper.js](http://paperjs.org/)\n\n\tPaper.js is an open source vector graphics scripting framework that runs on top of the HTML5 Canvas. It offers a clean Scene Graph / Document Object Model and a lot of powerful functionality to create and work with vector graphics and bezier curves, all neatly wrapped up in a well designed, consistent and clean programming interface.\n\n\t```\n\t// Create a Paper.js Path to draw a line into it:\n\tvar path = new Path();\n\t// Give the stroke a color\n\tpath.strokeColor = 'black';\n\tvar start = new Point(100, 100);\n\t// Move to start and draw a line from there\n\tpath.moveTo(start);\n\t// Note the plus operator on Point objects.\n\t// PaperScript does that for us, and much more!\n\tpath.lineTo(start + [ 100, -50 ]);\n\t```\n\t\n*\t[Easel.js](http://www.createjs.com/easeljs)\n\n\tA JavaScript library that makes working with the HTML5 Canvas element easy. Useful for creating games, generative art, and other highly graphical experiences.\n\n\t```\n\t//html\n\t<body onload=\"init();\">\n  <canvas id=\"demoCanvas\" width=\"500\" height=\"300\"></canvas>\n</body>\n\t//js\n\tvar stage = new createjs.Stage(\"demoCanvas\");\n\t//\n\tvar circle = new createjs.Shape();\ncircle.graphics.beginFill(\"DeepSkyBlue\").drawCircle(0, 0, 50);\ncircle.x = 100;\ncircle.y = 100;\nstage.addChild(circle);\n\t//\n\tstage.update();\n\t```\n\t\n\t\n*\t[Pixi.js](http://www.pixijs.com/)\n\n\t2D webGL renderer with canvas fallback\n\t\n\t```\n\tvar renderer = PIXI.autoDetectRenderer(800, 600,{backgroundColor : 0x1099bb});\ndocument.body.appendChild(renderer.view);\n// create the root of the scene graph\nvar stage = new PIXI.Container();\n// create a texture from an image path\nvar texture = PIXI.Texture.fromImage('_assets/basics/bunny.png');\n// create a new Sprite using the texture\nvar bunny = new PIXI.Sprite(texture);\n// center the sprite's anchor point\nbunny.anchor.x = 0.5;\nbunny.anchor.y = 0.5;\n// move the sprite to the center of the screen\nbunny.position.x = 200;\nbunny.position.y = 150;\nstage.addChild(bunny);\n// start animating\nanimate();\nfunction animate() {\n    requestAnimationFrame(animate);\n    // just for fun, let's rotate mr rabbit a little\n    bunny.rotation += 0.1;\n    // render the container\n    renderer.render(stage);\n}\n\t```\n*\t[three.js](http://threejs.org/)（3D）\n\t\n\tThree.js is a library that makes WebGL - 3D in the browser - easy to use. While a simple cube in raw WebGL would turn out hundreds of lines of Javascript and shader code, a Three.js equivalent is only a fraction of that.\n\t\n\t```\n\tvar scene = new THREE.Scene();\nvar camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\n\nvar renderer = new THREE.WebGLRenderer();\nrenderer.setSize( window.innerWidth, window.innerHeight );\ndocument.body.appendChild( renderer.domElement );\n\t```\n\n\n\t\n\t\n\n\n\n\n\n\n\n","source":"_posts/svg-and-canvas-library.md","raw":"title: 流行的svg/canvas动画库\ndate: 2015-08-03 13:16:08\ncategories: [javascript]\ntags: [svg,canvas,libray,animation,frent-end]\n---\n\n因为需要用到动画，所以收集了一下现在比较流行的一些svg和canvas动画库，收集的不一定很全，主要是一些使用比较多的库。\n\n#SVG\n*\t[SVG.JS](http://svgjs.com/)\n\n\tA lightweight library for manipulating and animating SVG.\n\n\t```\n\t\t// create svg drawing\n        var draw = SVG('drawing')\n        // create image\n        var image = draw.image('images/shade.jpg')\n        image.size(650, 650).y(-150)\n        // create text\n        var text = draw.text('SVG.JS').move(300, 0)\n        text.font({\n          family: 'Source Sans Pro'\n        , size: 180\n        , anchor: 'middle'\n        , leading: 1\n        })\n        // clip image with text\n        image.clipWith(text)\n\t```\n*\t[Snap.svg](http://snapsvg.io/)\n\t\n\tSVG is an excellent way to create interactive, resolution-independent vector graphics that will look great on any size screen. And the Snap.svg JavaScript library makes working with your SVG assets as easy as jQuery makes working with the DOM.\n\t\n\t```\n\t// First lets create our drawing surface out of existing SVG element\n// If you want to create new surface just provide dimensions\n// like s = Snap(800, 600);\nvar s = Snap(\"#svg\");\n// Lets create big circle in the middle:\nvar bigCircle = s.circle(150, 150, 100);\n// By default its black, lets change its attributes\nbigCircle.attr({\n    fill: \"#bada55\",\n    stroke: \"#000\",\n    strokeWidth: 5\n});\n\t```\n\t\t\n*\t[Raphael](http://raphaeljs.com/)\n\t\n\tRaphaël is a small JavaScript library that should simplify your work with vector graphics on the web. If you want to create your own specific chart or image crop and rotate widget, for example, you can achieve it simply and easily with this library.\n\n\t```\n\t// Creates canvas 320 × 200 at 10, 50\nvar paper = Raphael(10, 50, 320, 200);\n// Creates circle at x = 50, y = 40, with radius 10\nvar circle = paper.circle(50, 40, 10);\n// Sets the fill attribute of the circle to red (#f00)\ncircle.attr(\"fill\", \"#f00\");\n// Sets the stroke attribute of the circle to white\ncircle.attr(\"stroke\", \"#fff\");\n\t```\n*\t[bonsai](https://bonsaijs.org/)\n\t\n\tA lightweight graphics library with an intuitive graphics API and an SVG renderer.\n\n\t```\n\t//Draw a 100x200 rectangle to the stage at {0,0}:\nvar r = new Rect(0, 0, 100, 200).addTo(stage);\n//Fill it:\nr.fill('blue');\n//Change your mind... Make it darker:\nr.fill(color('green').darker());\n//Animate it:\nr.animate('400ms', {\n  x: 50,\n  y: 50,\n  width: 200\n});\n\t```\n*\t[vivus](https://maxwellito.github.io/vivus/)\n\t\n\tVivus is a lightweight JavaScript class (with no dependencies) that allows you to animate SVGs, giving them the appearence of being drawn. \n\n*\t[svgweb](https://code.google.com/p/svgweb/)\t\n\n\tSVG Web is a JavaScript library which provides SVG support on many browsers, including Internet Explorer, Firefox, and Safari. Using the library plus native SVG support you can instantly target ~95% of the existing installed web base.\n\t\n\t\n*\t[Processing](http://processingjs.org/)\n\t\n\tProcessing.js is the sister project of the popular Processing visual programming language, designed for the web. Processing.js makes your data visualizations, digital art, interactive animations, educational graphs, video games, etc. work using web standards and without any plug-ins. \n\t\n\t```\n\t// Global variables\nfloat radius = 50.0;\nint X, Y;\nint nX, nY;\nint delay = 16;\n// Setup the Processing Canvas\nvoid setup(){\n  size( 200, 200 );\n  strokeWeight( 10 );\n  frameRate( 15 );\n  X = width / 2;\n  Y = height / 2;\n  nX = X;\n  nY = Y;  \n}\n// Main draw loop\nvoid draw(){  \n  radius = radius + sin( frameCount / 4 );  \n  // Track circle to new destination\n  X+=(nX-X)/delay;\n  Y+=(nY-Y)/delay;  \n  // Fill canvas grey\n  background( 100 );  \n  // Set fill-color to blue\n  fill( 0, 121, 184 );\n  // Set stroke-color white\n  stroke(255);  \n  // Draw circle\n  ellipse( X, Y, radius, radius );                  \n}\n// Set circle's next destination\nvoid mouseMoved(){\n  nX = mouseX;\n  nY = mouseY;  \n}\n\t```\n*\t[Velocity.js](http://julian.com/research/velocity/)\t\n\t\n\tVelocity is an animation engine with the same API as jQuery's $.animate(). It works with and without jQuery. It's incredibly fast, and it features color animation, transforms, loops, easings, SVG support, and scrolling. It is the best of jQuery and CSS transitions combined.\n\t\n\t```\n\t// Animate width, then animate height.\n$(\"div\")\n    .velocity({ width: 75 }, 1500)\n    .velocity({ height: 0 }, 1250);\n\t```\n*\t[jQuery SVG](http://keith-wood.name/svgRef.html)\t\n\t\n\tA jQuery plugin that lets you interact with an SVG canvas.\n\t\n\t```\n\tvar svg = $('#svgintro').svg('get'); \nsvg.circle(130, 75, 50, {fill: 'none', stroke: 'red', strokeWidth: 3});\n\t```\n\n#Canvas\n\n*\t[KineticJS](http://kineticjs.com/)\n\t\n\tKineticJS is a fast, robust, HTML5 Canvas Library that is no longer maintained.\n\n*\t[Fabric](http://fabricjs.com/)\n\n\tFabric.js is a powerful and simple\nJavascript HTML5 canvas library\n\t\n\t```\n\t// reference canvas element (with id=\"c\")\nvar canvasEl = document.getElementById('c');\n// get 2d context to draw on (the \"bitmap\" mentioned earlier)\nvar ctx = canvasEl.getContext('2d');\n// set fill color of context\nctx.fillStyle = 'red';\n// create rectangle at a 100,100 point, with 20x20 dimensions\nctx.fillRect(100, 100, 20, 20);\n\t```\n*\t[Paper.js](http://paperjs.org/)\n\n\tPaper.js is an open source vector graphics scripting framework that runs on top of the HTML5 Canvas. It offers a clean Scene Graph / Document Object Model and a lot of powerful functionality to create and work with vector graphics and bezier curves, all neatly wrapped up in a well designed, consistent and clean programming interface.\n\n\t```\n\t// Create a Paper.js Path to draw a line into it:\n\tvar path = new Path();\n\t// Give the stroke a color\n\tpath.strokeColor = 'black';\n\tvar start = new Point(100, 100);\n\t// Move to start and draw a line from there\n\tpath.moveTo(start);\n\t// Note the plus operator on Point objects.\n\t// PaperScript does that for us, and much more!\n\tpath.lineTo(start + [ 100, -50 ]);\n\t```\n\t\n*\t[Easel.js](http://www.createjs.com/easeljs)\n\n\tA JavaScript library that makes working with the HTML5 Canvas element easy. Useful for creating games, generative art, and other highly graphical experiences.\n\n\t```\n\t//html\n\t<body onload=\"init();\">\n  <canvas id=\"demoCanvas\" width=\"500\" height=\"300\"></canvas>\n</body>\n\t//js\n\tvar stage = new createjs.Stage(\"demoCanvas\");\n\t//\n\tvar circle = new createjs.Shape();\ncircle.graphics.beginFill(\"DeepSkyBlue\").drawCircle(0, 0, 50);\ncircle.x = 100;\ncircle.y = 100;\nstage.addChild(circle);\n\t//\n\tstage.update();\n\t```\n\t\n\t\n*\t[Pixi.js](http://www.pixijs.com/)\n\n\t2D webGL renderer with canvas fallback\n\t\n\t```\n\tvar renderer = PIXI.autoDetectRenderer(800, 600,{backgroundColor : 0x1099bb});\ndocument.body.appendChild(renderer.view);\n// create the root of the scene graph\nvar stage = new PIXI.Container();\n// create a texture from an image path\nvar texture = PIXI.Texture.fromImage('_assets/basics/bunny.png');\n// create a new Sprite using the texture\nvar bunny = new PIXI.Sprite(texture);\n// center the sprite's anchor point\nbunny.anchor.x = 0.5;\nbunny.anchor.y = 0.5;\n// move the sprite to the center of the screen\nbunny.position.x = 200;\nbunny.position.y = 150;\nstage.addChild(bunny);\n// start animating\nanimate();\nfunction animate() {\n    requestAnimationFrame(animate);\n    // just for fun, let's rotate mr rabbit a little\n    bunny.rotation += 0.1;\n    // render the container\n    renderer.render(stage);\n}\n\t```\n*\t[three.js](http://threejs.org/)（3D）\n\t\n\tThree.js is a library that makes WebGL - 3D in the browser - easy to use. While a simple cube in raw WebGL would turn out hundreds of lines of Javascript and shader code, a Three.js equivalent is only a fraction of that.\n\t\n\t```\n\tvar scene = new THREE.Scene();\nvar camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\n\nvar renderer = new THREE.WebGLRenderer();\nrenderer.setSize( window.innerWidth, window.innerHeight );\ndocument.body.appendChild( renderer.domElement );\n\t```\n\n\n\t\n\t\n\n\n\n\n\n\n\n","slug":"svg-and-canvas-library","published":1,"updated":"2015-08-03T05:57:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cieodz8ml000gzt4oetm6rok3"},{"title":"资源收集:源码解读-JS框架或库","date":"2015-06-30T13:37:52.000Z","_content":"1.\tbackbone\n\t\n\t[backbone](http://www.cnblogs.com/nuysoft/archive/2012/03/19/2404274.html)\n\t\n\t[初探Backbone](http://www.cnblogs.com/yexiaochai/archive/2013/07/27/3219402.html)\n\t\n\t[Backbone使用总结](http://www.tuicool.com/articles/na67bm)\n\t\n2.\tJQuery\n\n\t[jQuery源码系列](https://github.com/JsAaron/jQuery)(form github)\n\n\t[jquery系列](http://www.2cto.com/special/jQuery/)\n\t\n\t[阅读 jQuery 源码的18个惊喜](http://blog.jobbole.com/74290/)\n\t\n3.\tjUnit\n\n\t[junit](http://www.ibm.com/developerworks/cn/java/j-lo-junit-src/)\n\t\n4.\tknockout\n\n\t[konckout](http://www.it165.net/pro/html/201404/12480.html)\n\t\n5.\tunderscore\n\t\n\t[underscore1](http://jr3.me/underscoreyuan-ma-jie-xi/)\n\n6.\tzepto.js\n\n\t[zepto](http://www.w3cschool.cc/w3cnote/zepto-js-source-analysis.html)\n\t\n\t[zepto中文手册](http://www.w3cschool.cc/manual/zeptojs.html)\n\t\t\n7.\tsea.js\n\n\t[seajs](http://segmentfault.com/a/1190000000471722)\n\t\n\t[sea系列](https://github.com/lifesinger/lifesinger.github.com/issues?q=label%3Ablog)(from github)\n","source":"_posts/source-of-JS-Library.md","raw":"title: 资源收集:源码解读-JS框架或库\ndate: 2015-06-30 21:37:52\ncategories: javascript\ntags: [javascript]\n---\n1.\tbackbone\n\t\n\t[backbone](http://www.cnblogs.com/nuysoft/archive/2012/03/19/2404274.html)\n\t\n\t[初探Backbone](http://www.cnblogs.com/yexiaochai/archive/2013/07/27/3219402.html)\n\t\n\t[Backbone使用总结](http://www.tuicool.com/articles/na67bm)\n\t\n2.\tJQuery\n\n\t[jQuery源码系列](https://github.com/JsAaron/jQuery)(form github)\n\n\t[jquery系列](http://www.2cto.com/special/jQuery/)\n\t\n\t[阅读 jQuery 源码的18个惊喜](http://blog.jobbole.com/74290/)\n\t\n3.\tjUnit\n\n\t[junit](http://www.ibm.com/developerworks/cn/java/j-lo-junit-src/)\n\t\n4.\tknockout\n\n\t[konckout](http://www.it165.net/pro/html/201404/12480.html)\n\t\n5.\tunderscore\n\t\n\t[underscore1](http://jr3.me/underscoreyuan-ma-jie-xi/)\n\n6.\tzepto.js\n\n\t[zepto](http://www.w3cschool.cc/w3cnote/zepto-js-source-analysis.html)\n\t\n\t[zepto中文手册](http://www.w3cschool.cc/manual/zeptojs.html)\n\t\t\n7.\tsea.js\n\n\t[seajs](http://segmentfault.com/a/1190000000471722)\n\t\n\t[sea系列](https://github.com/lifesinger/lifesinger.github.com/issues?q=label%3Ablog)(from github)\n","slug":"source-of-JS-Library","published":1,"updated":"2015-09-18T00:56:43.000Z","_id":"cieodz8mo000tzt4o11zjdo5v","comments":1,"layout":"post","photos":[],"link":""},{"title":"使用gas&charles为移动端搭建测试环境","date":"2015-07-01T12:49:35.000Z","_content":"移动端开发时调试并不想web端那么方便，移动端有自己的特有的一些使用场景，比如说支付，特定页面认证，微信登录等等。\n\n所以今天想大家推荐2个调试时用起来很顺手的工具，Gas Mask和Charles poxy.\n\n**工具**\n\n*\tgas mark\n*\tcharles\n\n###Gas配置过程\nGas Mask是个简单(而且免费)的hosts文件管理工具，方便的编辑hosts并在不同的hosts配置间切换。\n\n1.\t请确保以上软件已经安装完成\n2.\t配置想要代理的域名\n\t*\t启动gas mark, 'crate -> local'命名为'Host File'，格式如下：\n\t\n\t![新建](http://7xix26.com1.z0.glb.clouddn.com/gas1.png)\n\t\n\t```\n\t//默认内容\n\t127.0.0.1\t\tlocalhost\n\t255.255.255.255\tbroadcasthost\n\t::1\t\t\t\tlocalhost\n\tfe80::1%lo0\t\tlocalhost\n\n\t127.0.0.1 as-vip.missfresh.cn\n\t127.0.0.1 as.staging.missfresh.cn \n\t127.0.0.1 as-school.missfresh.cn \n\t```\t\n\t![配置](http://7xix26.com1.z0.glb.clouddn.com/gas3.png)\n\t\n\n###Charles \nCharles通过将自己设置成系统的网络访问代理服务器，使得所有的网络访问请求都通过它来完成，从而实现了网络封包的截取和分析。\n\nCharles是收费软件，可以免费试用30天。试用期过后，未付费的用户仍然可以继续使用，但是每次使用时间不能超过30分钟，并且启动时将会有10秒种的延时。\n\nCharles的主要功能有：\n*\tSession\n*\tRecording\n*\tRequest & Response\n*\tChart\n*\tImport\n*\tExport\n*\tSSL Certificates\n*\tLoad Testing\n*\tWeb Interface\n*\tProtocol Buffers\n*\tCommand-line Options\n\n####代理请求，捕获跟踪\n而我们常用的功能主要是捕获请求，查看请求跟响应过来的数据，以及网络环境模拟.\n\n*\t设置代理端口,暂定为8888\n\t\n\t![设置代理端口](http://7xix26.com1.z0.glb.clouddn.com/charles1.png)\n\t![设置代理端口](http://7xix26.com1.z0.glb.clouddn.com/charles6.png)\n\n*\t设置监听的请求\n\t\n\t![设置监听请求](http://7xix26.com1.z0.glb.clouddn.com/charles2.png)\n\n*\t手机设置代理\n\t\n\t![手机代理](http://7xix26.com1.z0.glb.clouddn.com/charles4.png\u0010)\n\t\n*\t手机代理设置成功后，charles回提示，点击Allow\n\t![charle允许接入](http://7xix26.com1.z0.glb.clouddn.com/charles3.png)\n\n*\t访问被代理的地址，charles上会有记录\n\t![访问记录](http://7xix26.com1.z0.glb.clouddn.com/charles7.png)\n\n####模拟网络\n这个功能非常好，charles可以模拟不同的网络，比如2G,3G，还能自定义设置网络速度，可以用来模拟慢网速。\n\n*\t开启网速模拟\n\n\t![开启](http://7xix26.com1.z0.glb.clouddn.com/charles10.png)\n*\t配置\n\n\t![配置](http://7xix26.com1.z0.glb.clouddn.com/charles11.png)\n\n参考文献：\n*\t[iOS开发工具-网络封包分析工具Charles](http://blog.devtang.com/blog/2013/12/11/network-tool-charles-intr/)\n\n**软件下载**\n*\t[gas mark](http://www.macupdate.com/app/mac/29949/gas-mask/)\n*\t[charles](http://www.macupdate.com/app/mac/12462/charles/)(自行破解)\n\n\n\n\n","source":"_posts/proxy-for-mobile.md","raw":"title: 使用gas&charles为移动端搭建测试环境\ndate: 2015-07-01 20:49:35\ncategories: Tools \ntags: [tool,webapp,gasmark,charles]\n---\n移动端开发时调试并不想web端那么方便，移动端有自己的特有的一些使用场景，比如说支付，特定页面认证，微信登录等等。\n\n所以今天想大家推荐2个调试时用起来很顺手的工具，Gas Mask和Charles poxy.\n\n**工具**\n\n*\tgas mark\n*\tcharles\n\n###Gas配置过程\nGas Mask是个简单(而且免费)的hosts文件管理工具，方便的编辑hosts并在不同的hosts配置间切换。\n\n1.\t请确保以上软件已经安装完成\n2.\t配置想要代理的域名\n\t*\t启动gas mark, 'crate -> local'命名为'Host File'，格式如下：\n\t\n\t![新建](http://7xix26.com1.z0.glb.clouddn.com/gas1.png)\n\t\n\t```\n\t//默认内容\n\t127.0.0.1\t\tlocalhost\n\t255.255.255.255\tbroadcasthost\n\t::1\t\t\t\tlocalhost\n\tfe80::1%lo0\t\tlocalhost\n\n\t127.0.0.1 as-vip.missfresh.cn\n\t127.0.0.1 as.staging.missfresh.cn \n\t127.0.0.1 as-school.missfresh.cn \n\t```\t\n\t![配置](http://7xix26.com1.z0.glb.clouddn.com/gas3.png)\n\t\n\n###Charles \nCharles通过将自己设置成系统的网络访问代理服务器，使得所有的网络访问请求都通过它来完成，从而实现了网络封包的截取和分析。\n\nCharles是收费软件，可以免费试用30天。试用期过后，未付费的用户仍然可以继续使用，但是每次使用时间不能超过30分钟，并且启动时将会有10秒种的延时。\n\nCharles的主要功能有：\n*\tSession\n*\tRecording\n*\tRequest & Response\n*\tChart\n*\tImport\n*\tExport\n*\tSSL Certificates\n*\tLoad Testing\n*\tWeb Interface\n*\tProtocol Buffers\n*\tCommand-line Options\n\n####代理请求，捕获跟踪\n而我们常用的功能主要是捕获请求，查看请求跟响应过来的数据，以及网络环境模拟.\n\n*\t设置代理端口,暂定为8888\n\t\n\t![设置代理端口](http://7xix26.com1.z0.glb.clouddn.com/charles1.png)\n\t![设置代理端口](http://7xix26.com1.z0.glb.clouddn.com/charles6.png)\n\n*\t设置监听的请求\n\t\n\t![设置监听请求](http://7xix26.com1.z0.glb.clouddn.com/charles2.png)\n\n*\t手机设置代理\n\t\n\t![手机代理](http://7xix26.com1.z0.glb.clouddn.com/charles4.png\u0010)\n\t\n*\t手机代理设置成功后，charles回提示，点击Allow\n\t![charle允许接入](http://7xix26.com1.z0.glb.clouddn.com/charles3.png)\n\n*\t访问被代理的地址，charles上会有记录\n\t![访问记录](http://7xix26.com1.z0.glb.clouddn.com/charles7.png)\n\n####模拟网络\n这个功能非常好，charles可以模拟不同的网络，比如2G,3G，还能自定义设置网络速度，可以用来模拟慢网速。\n\n*\t开启网速模拟\n\n\t![开启](http://7xix26.com1.z0.glb.clouddn.com/charles10.png)\n*\t配置\n\n\t![配置](http://7xix26.com1.z0.glb.clouddn.com/charles11.png)\n\n参考文献：\n*\t[iOS开发工具-网络封包分析工具Charles](http://blog.devtang.com/blog/2013/12/11/network-tool-charles-intr/)\n\n**软件下载**\n*\t[gas mark](http://www.macupdate.com/app/mac/29949/gas-mask/)\n*\t[charles](http://www.macupdate.com/app/mac/12462/charles/)(自行破解)\n\n\n\n\n","slug":"proxy-for-mobile","published":1,"updated":"2015-07-06T03:10:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cieodz8mq000xzt4ogepeokuf"},{"title":"gulp插件开发手札","date":"2015-06-19T06:27:15.000Z","_content":"gulp\n\n一个比grunt使用更为简单的自动化构建工具，Gulp通过流和代码优于配置策略来尽量简化任务编写的工作。\n\n这里不在赘述gulp的基本使用法。请参考：\n\n*\t[gulp getting-started](https://github.com/gulpjs/gulp/blob/master/docs/getting-started.md)\n*\t[gulp高级技巧](http://segmentfault.com/a/1190000000711469)\n*\t[gulp vs grunt\u0010](http://segmentfault.com/a/1190000002491282)\n\n\n**需求**\n\n项目中使用了gulp，以及一些插件，其中有压缩，md5后缀等等，我们的项目仅在移动端运行，考虑到性能，需要延迟加载js文件，因为压缩后的js文件体积相对比较，想通过创建script标签的形式，等页面ready了再去加载js。因为使用了md5，所以每次压缩完的文件名都不一样，而动态加载的脚本需要知道压缩后的文件名称，不想每次手都修改。\n\n**插件功能**\n\n所以要实现的功能就是，在js进行压缩，合并以后，处理首页html.\n\n首先要知道如何开发一个gulp插件\n\n*\t[gulp插件开发规范(英文)](https://github.com/gulpjs/gulp/blob/master/docs/writing-a-plugin/guidelines.md)\n*\t[gulp插件开发规范(中文)](http://www.u396.com/gulp-plugin-guildlines.html)\n\n因为是个小功能，所以我也就没有单独封装成模块，而是封装成一个单独函数方便使用：\n\n```\nfunction asyncLoad() {\n  console.log(\"Starting 'async load'...\");\n  return through.obj(function(file,enc,cb){\n    if(file.isNull()) {\n      cb(null,file);\n    }\n    if (file.isBuffer()) {\n      var data = Buffer.concat([file.contents]).toString();\n      data = data.replace('<link rel=\"stylesheet\" href=\"', '<link rel=\"stylesheet\" href=\"' + statics + '/');\n      data = data.replace('<img src=\"./img/icon.png\" style=\"width:80px\" alt=\"\"/>', '<img src=\"' +statics + '/img/icon.png\" style=\"width:80px\" alt=\"\"/>');\n      data = data.replace('<script src=\"js/ionic.all','<script src=\"load.js\" id=\"asyncLoading\" data-asyncLoading=\"'+ statics +'/js/ionic.all');\n      data = data.replace('</head>', '<script type=\"text/javascript\" src=\"http://tajs.qq.com/stats?sId=45760313\" charset=\"UTF-8\"></script>\\n</head>');\n      file.contents = new Buffer(data);\n    }\n    if (file.isStream()) {\n        console.log('async load error');\n    }\n    cb(null, file);\n  });\n}\n```\n说明：\n\n*\t需要安装through2模块： npm install throuth2  --save-dev\n*\tNode中buffer的使用\n\t*\t[node的buffer介绍](http://blog.chinaunix.net/uid-26672038-id-4173346.html)\n\t*\t[浅析nodejs的buffer类](https://cnodejs.org/topic/5189ff4f63e9f8a54207f60c)\n\n**使用**\n\n使用方式跟普通的gulp插件调用方式一样\n\n```\ngulp.task('usemin', function(cd) {\n  return gulp.src('./www/index.html')\n    .pipe(usemin({\n      css: [minifyCss(), 'concat', rev()],      \n      js: [rev()]\n    }))\n    .pipe(asyncLoad())\n    .pipe(gulp.dest('./dest/'));\n});\n```\n\n总结：\n\n功能很简单，就是需要知道如何开发gulp插件，参考上面的模板，然后参看了一些gulp官网上的插件是如何写的，基本上就完了，同事需要知道nodejs如何操作buffer就可以了。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/plugin-for-Gulp.md","raw":"title: gulp插件开发手札\ndate: 2015-06-19 14:27:15\ncategories: Tools\ntags: [gulp,plugin,tool]\n---\ngulp\n\n一个比grunt使用更为简单的自动化构建工具，Gulp通过流和代码优于配置策略来尽量简化任务编写的工作。\n\n这里不在赘述gulp的基本使用法。请参考：\n\n*\t[gulp getting-started](https://github.com/gulpjs/gulp/blob/master/docs/getting-started.md)\n*\t[gulp高级技巧](http://segmentfault.com/a/1190000000711469)\n*\t[gulp vs grunt\u0010](http://segmentfault.com/a/1190000002491282)\n\n\n**需求**\n\n项目中使用了gulp，以及一些插件，其中有压缩，md5后缀等等，我们的项目仅在移动端运行，考虑到性能，需要延迟加载js文件，因为压缩后的js文件体积相对比较，想通过创建script标签的形式，等页面ready了再去加载js。因为使用了md5，所以每次压缩完的文件名都不一样，而动态加载的脚本需要知道压缩后的文件名称，不想每次手都修改。\n\n**插件功能**\n\n所以要实现的功能就是，在js进行压缩，合并以后，处理首页html.\n\n首先要知道如何开发一个gulp插件\n\n*\t[gulp插件开发规范(英文)](https://github.com/gulpjs/gulp/blob/master/docs/writing-a-plugin/guidelines.md)\n*\t[gulp插件开发规范(中文)](http://www.u396.com/gulp-plugin-guildlines.html)\n\n因为是个小功能，所以我也就没有单独封装成模块，而是封装成一个单独函数方便使用：\n\n```\nfunction asyncLoad() {\n  console.log(\"Starting 'async load'...\");\n  return through.obj(function(file,enc,cb){\n    if(file.isNull()) {\n      cb(null,file);\n    }\n    if (file.isBuffer()) {\n      var data = Buffer.concat([file.contents]).toString();\n      data = data.replace('<link rel=\"stylesheet\" href=\"', '<link rel=\"stylesheet\" href=\"' + statics + '/');\n      data = data.replace('<img src=\"./img/icon.png\" style=\"width:80px\" alt=\"\"/>', '<img src=\"' +statics + '/img/icon.png\" style=\"width:80px\" alt=\"\"/>');\n      data = data.replace('<script src=\"js/ionic.all','<script src=\"load.js\" id=\"asyncLoading\" data-asyncLoading=\"'+ statics +'/js/ionic.all');\n      data = data.replace('</head>', '<script type=\"text/javascript\" src=\"http://tajs.qq.com/stats?sId=45760313\" charset=\"UTF-8\"></script>\\n</head>');\n      file.contents = new Buffer(data);\n    }\n    if (file.isStream()) {\n        console.log('async load error');\n    }\n    cb(null, file);\n  });\n}\n```\n说明：\n\n*\t需要安装through2模块： npm install throuth2  --save-dev\n*\tNode中buffer的使用\n\t*\t[node的buffer介绍](http://blog.chinaunix.net/uid-26672038-id-4173346.html)\n\t*\t[浅析nodejs的buffer类](https://cnodejs.org/topic/5189ff4f63e9f8a54207f60c)\n\n**使用**\n\n使用方式跟普通的gulp插件调用方式一样\n\n```\ngulp.task('usemin', function(cd) {\n  return gulp.src('./www/index.html')\n    .pipe(usemin({\n      css: [minifyCss(), 'concat', rev()],      \n      js: [rev()]\n    }))\n    .pipe(asyncLoad())\n    .pipe(gulp.dest('./dest/'));\n});\n```\n\n总结：\n\n功能很简单，就是需要知道如何开发gulp插件，参考上面的模板，然后参看了一些gulp官网上的插件是如何写的，基本上就完了，同事需要知道nodejs如何操作buffer就可以了。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"plugin-for-Gulp","published":1,"updated":"2015-06-19T07:30:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cieodz8mw0018zt4ot67abn6o"},{"title":"服务定义的简短指南","date":"2015-07-07T14:15:59.000Z","_content":"service即服务，提供了一种能在应用的整个生命周期内保持数据的方法，能够在控制器之间进行通信，并且保持数据的一致性。\n\n服务是一个单例对象，在每个应用中只会被实例一次（被$injector实例化的），并且是延迟加载（需要时才会被创建）。\n\n服务提供了把特定功能相关联的方法集中在一起的接口。\n\nangularjs自身提供了非常多的服务让我们使用，常用的有$http,$timeout,$interval,$q,$rootScope等等。下载了Dash应用的童鞋可以方便的看到dash文档整理好的资料清除的罗列了出来。\n\n除了angularjs提供的以为，使用最多的还是自己根据业务需要自定义服务。而angularjs提供了5种方式来定义服务：\n\n##factory()\n**是创建和配置服务的最快捷方式**\n\n此方式定义的服务返回一个包含服务函数跟服务数据的对象。angularjs中也有使用此方式实现的服务，例如:$http,$q.\n\n```\n//定义\nangular.module('myApp.services')\n  .factory('User', function($http) {\n  \tvar backendUrl = 'http://localhost:3000';\n  \tvar service = {\n  \t  user:{},\n  \t  setName: function(name) {\n  \t    service.user['name'] = name;\n  \t  },\n  \t  setEmail: function(email) {\n  \t    service.user['email'] = email;\n  \t  }\n  \t};\n  });\n  return service;\n  \n  //使用\n  angular.module('myApp')\n  .controller('MainCtrl', function($scope, User) {\n    $scope.setName = User.setName;\n  });\n  \n```\n**注**\n*\t当我们仅仅是定义一些方法的集合、数据并且不需要处理很复杂的业务时，用factory()来定义服务是非常好的一个选择。\n*\t若想要在.config() 中对服务进行配置时，不能使用factroy()来定义服务。\n\n\n##service()\n该方式可以注册一个支持构造函数的服务，允许我们为服务对象注册一个构造函数。\n\n```\n//定义\nangular.module('myApp.services')\n  .service('User', function($http) {\n  \tvar self = this;\n  \tthis.user = {};\n  \tthis.backendUrl = 'http://localhost:3000';\n  \tthis.setName = function(name) {\n  \t\tself.user['name\u0010'] = name;\n  \t};\n  });\n  \n//使用\nangular.module('myApp')\n.controller('MainCtrl', function($scope, User){\n  $scope.setName = User.setName;\n});\n\n```\n**注**\n\n使用service()方式是处理复杂的业务逻辑的是不错的选择。\n\n##provider()\n所有的服务工厂都是由$provicde服务创建的，$provide服务负责在运行时初始化这些提供者。\n\n提供者是一个具有$get()方法的对象，$injector通过调用$get()创建服务实例。\n\n```\n//定义\nangular.module('myApp.services')\n  .provider('User', function(){\n    this.backendUrl = 'http://localhost:3000';\n    this.setBackendUrl = function(url) {\n      if(url) this.backendUrl = url;\n    };\n    //$get\n    this.$get = function($http) {\n      var self = this;\n      var service = {\n      \tuser: {},\n      \tsetName: function(name){\n      \t  service.user['name'] = name;\n      \t}\n      };\n      return service;\n    };\n  });\n//使用\nangular.module('myApp)\n.config(function(UserProvider){\n  UserProvider.setBackendUrl('http://test.com/api');\n});\n\nangular.module('myApp')\n.controller('MainCtrl', function($scope, User){\n  $scope.setName = User.setName;\n});\n\n```\n**注**\n使用$provide()实际创建了一个提供者，这个提供者在定义是没有Provider后缀，但是在config()使用时，需要加上xxxProvider.\n\n\n##constant()\n可以将一个已经存在的变量值注册为服务，并将其注入到应用的其他部分当中。\n\n```\n//定义\nangular.module('myApp')\n.constant('accessToken','guid-xx-xxxx-xxxx');\n\n//使用\nangular.module('myApp')\n.controller('myController', function($scope,accessToken){\n\t$scope.accessToken = accessToken;\n});\n```\n**注**\n这个常量不能被装饰器拦截\n\n##value()\n如果服务的$get()方法返回的是个常量，就没有必要像上面那样定义那么复杂的完整服务。\n\n```\nangular.module('myApp').value('accessToken', 'guid-xx-xxx-xxx');\n\n```\n\n##constant()跟value()的区别\n以constant方式创建的变量可以注意到配置函数中。value()不可以，一般用value()来注册对象或者函数。\n\n---\n参考资料：\n\n[The short guide to service definitions](http://www.ng-newsletter.com/advent2013/#!/day/1)\n\n[ Developer Guide / Services](https://docs.angularjs.org/guide/services)\n\n\n\n\n\n\u0010","source":"_posts/newsletter-1-service.md","raw":"title: 服务定义的简短指南\ndate: 2015-07-07 22:15:59\ncategories: angularjs\ntags: [angularjs,service,javascript]\n---\nservice即服务，提供了一种能在应用的整个生命周期内保持数据的方法，能够在控制器之间进行通信，并且保持数据的一致性。\n\n服务是一个单例对象，在每个应用中只会被实例一次（被$injector实例化的），并且是延迟加载（需要时才会被创建）。\n\n服务提供了把特定功能相关联的方法集中在一起的接口。\n\nangularjs自身提供了非常多的服务让我们使用，常用的有$http,$timeout,$interval,$q,$rootScope等等。下载了Dash应用的童鞋可以方便的看到dash文档整理好的资料清除的罗列了出来。\n\n除了angularjs提供的以为，使用最多的还是自己根据业务需要自定义服务。而angularjs提供了5种方式来定义服务：\n\n##factory()\n**是创建和配置服务的最快捷方式**\n\n此方式定义的服务返回一个包含服务函数跟服务数据的对象。angularjs中也有使用此方式实现的服务，例如:$http,$q.\n\n```\n//定义\nangular.module('myApp.services')\n  .factory('User', function($http) {\n  \tvar backendUrl = 'http://localhost:3000';\n  \tvar service = {\n  \t  user:{},\n  \t  setName: function(name) {\n  \t    service.user['name'] = name;\n  \t  },\n  \t  setEmail: function(email) {\n  \t    service.user['email'] = email;\n  \t  }\n  \t};\n  });\n  return service;\n  \n  //使用\n  angular.module('myApp')\n  .controller('MainCtrl', function($scope, User) {\n    $scope.setName = User.setName;\n  });\n  \n```\n**注**\n*\t当我们仅仅是定义一些方法的集合、数据并且不需要处理很复杂的业务时，用factory()来定义服务是非常好的一个选择。\n*\t若想要在.config() 中对服务进行配置时，不能使用factroy()来定义服务。\n\n\n##service()\n该方式可以注册一个支持构造函数的服务，允许我们为服务对象注册一个构造函数。\n\n```\n//定义\nangular.module('myApp.services')\n  .service('User', function($http) {\n  \tvar self = this;\n  \tthis.user = {};\n  \tthis.backendUrl = 'http://localhost:3000';\n  \tthis.setName = function(name) {\n  \t\tself.user['name\u0010'] = name;\n  \t};\n  });\n  \n//使用\nangular.module('myApp')\n.controller('MainCtrl', function($scope, User){\n  $scope.setName = User.setName;\n});\n\n```\n**注**\n\n使用service()方式是处理复杂的业务逻辑的是不错的选择。\n\n##provider()\n所有的服务工厂都是由$provicde服务创建的，$provide服务负责在运行时初始化这些提供者。\n\n提供者是一个具有$get()方法的对象，$injector通过调用$get()创建服务实例。\n\n```\n//定义\nangular.module('myApp.services')\n  .provider('User', function(){\n    this.backendUrl = 'http://localhost:3000';\n    this.setBackendUrl = function(url) {\n      if(url) this.backendUrl = url;\n    };\n    //$get\n    this.$get = function($http) {\n      var self = this;\n      var service = {\n      \tuser: {},\n      \tsetName: function(name){\n      \t  service.user['name'] = name;\n      \t}\n      };\n      return service;\n    };\n  });\n//使用\nangular.module('myApp)\n.config(function(UserProvider){\n  UserProvider.setBackendUrl('http://test.com/api');\n});\n\nangular.module('myApp')\n.controller('MainCtrl', function($scope, User){\n  $scope.setName = User.setName;\n});\n\n```\n**注**\n使用$provide()实际创建了一个提供者，这个提供者在定义是没有Provider后缀，但是在config()使用时，需要加上xxxProvider.\n\n\n##constant()\n可以将一个已经存在的变量值注册为服务，并将其注入到应用的其他部分当中。\n\n```\n//定义\nangular.module('myApp')\n.constant('accessToken','guid-xx-xxxx-xxxx');\n\n//使用\nangular.module('myApp')\n.controller('myController', function($scope,accessToken){\n\t$scope.accessToken = accessToken;\n});\n```\n**注**\n这个常量不能被装饰器拦截\n\n##value()\n如果服务的$get()方法返回的是个常量，就没有必要像上面那样定义那么复杂的完整服务。\n\n```\nangular.module('myApp').value('accessToken', 'guid-xx-xxx-xxx');\n\n```\n\n##constant()跟value()的区别\n以constant方式创建的变量可以注意到配置函数中。value()不可以，一般用value()来注册对象或者函数。\n\n---\n参考资料：\n\n[The short guide to service definitions](http://www.ng-newsletter.com/advent2013/#!/day/1)\n\n[ Developer Guide / Services](https://docs.angularjs.org/guide/services)\n\n\n\n\n\n\u0010","slug":"newsletter-1-service","published":1,"updated":"2015-07-09T03:35:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cieodz8mz001fzt4oeq5r81ll"},{"title":"学习flexbox弹性布局","date":"2015-07-07T10:26:19.000Z","_content":"\n##基础概念\n\n伸缩容器：一个设有“display:flex”或“display:inline-flex”的元素\n\n伸缩项目：伸缩容器的子元素\n\n主轴、主轴方向：用户代理沿着一个伸缩容器的主轴配置伸缩项目，主轴是主轴方向的延伸。\n\n主轴起点、主轴终点：伸缩项目的配置从容器的主轴起点边开始，往主轴终点边结束。\n\n主轴长度、主轴长度属性：伸缩项目的在主轴方向的宽度或高度就是项目的主轴长度，伸缩项目的主轴长度属性是width或height属性，由哪一个对着主轴方向决定。\n\n侧轴、侧轴方向：与主轴垂直的轴称作侧轴，是侧轴方向的延伸。\n\n侧轴起点、侧轴终点：填满项目的伸缩行的配置从容器的侧轴起点边开始，往侧轴终点边结束。\n\n侧轴长度、侧轴长度属性：伸缩项目的在侧轴方向的宽度或高度就是项目的侧轴长度，伸缩项目的侧轴长度属性是「width」或「height」属性，由哪一个对着侧轴方向决定。\n\n![主轴，侧轴](http://7xix26.com1.z0.glb.clouddn.com/flex.png)\n\n**父级元素**\n\n*\tdisplay:flex\n\n*\tflex-flow\n\t*\trow\t横排\n\t*\tcolumn\t竖排 \n\t*\trow-reverse\n\t*\tcolumn-reverse\n\t*\twrap\t允许折行\n\t\n\t**备注**\n\t\n\tflex-flow其实是flex-direction(取值有:row ,column, row-reverse, column-reverse) 与 flex-wrap（取值有:wrap, no-wrap, wrap-reverse）的缩写属性。\n\n*\t**主轴，侧轴**\t\n\t\n*\talign-items\n\t*\t侧轴方向排列方式\n\t\t*\tflex-flow为row是，侧轴是Y轴\n\t*\tflex-start\t侧轴起点对奇\n\t*\tcenter\t\t侧轴居中\n\t*\tflex-end\t侧轴终点对齐\n\t*\tstretch\t\t填充侧轴\n\n*\tjustify-content\n\t*\t控制子元素之间多余的空白如何处理\n\t*\tflex-start\n\t*\tflex-end\n\t*\tcenter\t\n\t*\tspace-around\n\t\t\n\t\t所有的子元素均匀的分布在父元素上，表现为居中\t\n\t\n\t*\tspace-between\n\t\t\n\t\t区别于space-around 首位都在住主轴上，其他子元素居中与父元素的宽上\n\t\n*\talign-content\n\t*\t多行伸缩容器的对其\n\t*\t**仅在伸缩容器在侧轴占有固定的空间时才有用**\n\t*\tflex-start\n\t*\tflex-end\n\t*\tcenter\n\t*\tspace-around\n\t\t\n\t\t所有的子元素均匀的分布在父元素上，表现为居中\t\n\t*\tspace-between\n\t\t\n\t\t区别于space-around 首位都在住主轴上，其他子元素居中与父元素的宽上\t\n\t\n**子元素**\t\n\t\n*\torder\n\t*\t改变布局顺序\n\t\n*\tflex\n\t*\t让元素可以伸缩\n\t\t*\t当flex-flow为row时，伸缩方向为width\n\t\t*\t当flex-flow为column时，伸缩方向为height\n\t*\t没有单位\n\t*\t可以设置基准值\n\t*\t设置负向伸缩值\n\t\n\t```\n\t.first {\u0010\n\t\tflex:1\t200px;\n\t}\n\t.second {\n\t\tflex:2\t300px;\n\t}\n\t.third {\n\t\tflex:1 2 400px;\n\t}\u0010\n\t2个参数：\n\t前面的数字为比例值，后面的为基准值\n\t\n\t```\n\t\n\t```\n\t.first {\n\t\tflex:1 1 400px;\n\t}\n\t.second {\n\t\tflex:2 3 600px;\n\t}\n\t.third {\n\t\tflex:1 2 400px;\n\t}\n\t3个参数：\n\t中间的参数表示加权比\n\t假设父元素在主轴的方向尺寸为 1100px，在这种情况下，上例中的子元素就会溢出 300px（在主轴方向总尺寸为 1400px），因为设置了负向伸缩值，加权综合为 400px × 1 + 600px × 3 + 400px × 2 = 3000px：\n\tfirst 将被移除溢出量的 400px/3000px = 2/15，也就是 40px，因此计算后的尺寸为 360px。\n\tsecond 将被移除溢出量的 600px × 3/3000px = 9/15，也就是 180px，因此计算后的尺寸为 420px。\n\tthrid 将被移除溢出量的 400px × 2/3000px = 4/15，也就是 80px，因此计算后的尺寸为 320px。\n所以负向伸缩值越大元素越小！\t\n\t\n\t```\n---\n\n参考资料\n\n[伸缩布局 — 打开布局天堂之门](http://dev.oupeng.com/articles/flexbox-basics)\n\n[Flexbox——快速布局神器](http://www.w3cplus.com/css3/flexbox-basics.html)\n\n\n\n\t\n\n\n\n\n","source":"_posts/learn-flexbox.md","raw":"title: 学习flexbox弹性布局\ndate: 2015-07-07 18:26:19\ncategories: css\ntags: [css,flexbox,弹性布局]\n---\n\n##基础概念\n\n伸缩容器：一个设有“display:flex”或“display:inline-flex”的元素\n\n伸缩项目：伸缩容器的子元素\n\n主轴、主轴方向：用户代理沿着一个伸缩容器的主轴配置伸缩项目，主轴是主轴方向的延伸。\n\n主轴起点、主轴终点：伸缩项目的配置从容器的主轴起点边开始，往主轴终点边结束。\n\n主轴长度、主轴长度属性：伸缩项目的在主轴方向的宽度或高度就是项目的主轴长度，伸缩项目的主轴长度属性是width或height属性，由哪一个对着主轴方向决定。\n\n侧轴、侧轴方向：与主轴垂直的轴称作侧轴，是侧轴方向的延伸。\n\n侧轴起点、侧轴终点：填满项目的伸缩行的配置从容器的侧轴起点边开始，往侧轴终点边结束。\n\n侧轴长度、侧轴长度属性：伸缩项目的在侧轴方向的宽度或高度就是项目的侧轴长度，伸缩项目的侧轴长度属性是「width」或「height」属性，由哪一个对着侧轴方向决定。\n\n![主轴，侧轴](http://7xix26.com1.z0.glb.clouddn.com/flex.png)\n\n**父级元素**\n\n*\tdisplay:flex\n\n*\tflex-flow\n\t*\trow\t横排\n\t*\tcolumn\t竖排 \n\t*\trow-reverse\n\t*\tcolumn-reverse\n\t*\twrap\t允许折行\n\t\n\t**备注**\n\t\n\tflex-flow其实是flex-direction(取值有:row ,column, row-reverse, column-reverse) 与 flex-wrap（取值有:wrap, no-wrap, wrap-reverse）的缩写属性。\n\n*\t**主轴，侧轴**\t\n\t\n*\talign-items\n\t*\t侧轴方向排列方式\n\t\t*\tflex-flow为row是，侧轴是Y轴\n\t*\tflex-start\t侧轴起点对奇\n\t*\tcenter\t\t侧轴居中\n\t*\tflex-end\t侧轴终点对齐\n\t*\tstretch\t\t填充侧轴\n\n*\tjustify-content\n\t*\t控制子元素之间多余的空白如何处理\n\t*\tflex-start\n\t*\tflex-end\n\t*\tcenter\t\n\t*\tspace-around\n\t\t\n\t\t所有的子元素均匀的分布在父元素上，表现为居中\t\n\t\n\t*\tspace-between\n\t\t\n\t\t区别于space-around 首位都在住主轴上，其他子元素居中与父元素的宽上\n\t\n*\talign-content\n\t*\t多行伸缩容器的对其\n\t*\t**仅在伸缩容器在侧轴占有固定的空间时才有用**\n\t*\tflex-start\n\t*\tflex-end\n\t*\tcenter\n\t*\tspace-around\n\t\t\n\t\t所有的子元素均匀的分布在父元素上，表现为居中\t\n\t*\tspace-between\n\t\t\n\t\t区别于space-around 首位都在住主轴上，其他子元素居中与父元素的宽上\t\n\t\n**子元素**\t\n\t\n*\torder\n\t*\t改变布局顺序\n\t\n*\tflex\n\t*\t让元素可以伸缩\n\t\t*\t当flex-flow为row时，伸缩方向为width\n\t\t*\t当flex-flow为column时，伸缩方向为height\n\t*\t没有单位\n\t*\t可以设置基准值\n\t*\t设置负向伸缩值\n\t\n\t```\n\t.first {\u0010\n\t\tflex:1\t200px;\n\t}\n\t.second {\n\t\tflex:2\t300px;\n\t}\n\t.third {\n\t\tflex:1 2 400px;\n\t}\u0010\n\t2个参数：\n\t前面的数字为比例值，后面的为基准值\n\t\n\t```\n\t\n\t```\n\t.first {\n\t\tflex:1 1 400px;\n\t}\n\t.second {\n\t\tflex:2 3 600px;\n\t}\n\t.third {\n\t\tflex:1 2 400px;\n\t}\n\t3个参数：\n\t中间的参数表示加权比\n\t假设父元素在主轴的方向尺寸为 1100px，在这种情况下，上例中的子元素就会溢出 300px（在主轴方向总尺寸为 1400px），因为设置了负向伸缩值，加权综合为 400px × 1 + 600px × 3 + 400px × 2 = 3000px：\n\tfirst 将被移除溢出量的 400px/3000px = 2/15，也就是 40px，因此计算后的尺寸为 360px。\n\tsecond 将被移除溢出量的 600px × 3/3000px = 9/15，也就是 180px，因此计算后的尺寸为 420px。\n\tthrid 将被移除溢出量的 400px × 2/3000px = 4/15，也就是 80px，因此计算后的尺寸为 320px。\n所以负向伸缩值越大元素越小！\t\n\t\n\t```\n---\n\n参考资料\n\n[伸缩布局 — 打开布局天堂之门](http://dev.oupeng.com/articles/flexbox-basics)\n\n[Flexbox——快速布局神器](http://www.w3cplus.com/css3/flexbox-basics.html)\n\n\n\n\t\n\n\n\n\n","slug":"learn-flexbox","published":1,"updated":"2015-07-10T07:19:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cieodz8n1001lzt4owudz0gco"},{"title":"learn css part two","date":"2015-06-23T07:54:29.000Z","_content":"##文字\n*\ttext-index\n\t\n\t对块级或者内联块级元素设置缩进\n*\ttext-transform\n\t*\tnone\n\t*\tcapitalize\t单词首字母转换成大写\n\t*\tuppercase\n\t*\tlowercase\n\n*\ttext-decoration\n\n\t对文字修饰(下划线，删除线)\n*\ttext-shadow\n\t*\t文字阴影\n*\ttext-fill-color\n\t*\t文字填充颜色\n\t*\t[demo](http://demo.doyoe.com/css3/text-fill-color/gradient-text.htm)\n*\ttext-stroke\n\t*\t文字描边\n*\tletter-spacing\n\t*\t文字间距\n*\tword-spacing\n\t*\t单词间距\n*\tword-wrap\n\t*\t换行\n\t*\tnormal | break-word\n*\twhite-space\n\t*\tnormal\n\t*\tpre\n\t*\tnowrap: 强制在同一行显示所有文本\n\t*\tpre-wrap: 碰到边界换行\n\t*\tpre-line: 碰到边界换行\n\n##列表\n*\tlist-style\n*\tlist-style-image\n*\tlist-style-position\n\t*\toutside\n\t*\tinside\n*\tlist-style-type\n\n##用户界面\t\n*\tbox-sizing\n\t*\tcontent-box (默认)\n\t\t\n\t\tpadding和border不被包含在定义的width和height之内,实际宽度= width + border+ padding\n\t\t\n\t*\tborder-box\n\t\tpadding和border包含在定义的width和height之内\n\n\n##2D变换-transform\n*\ttransform\n\t\n\t可用属性\n\t*\tnone\n\t*\tmatrix(<number>,<number>,<number>,<number>,<number>,<number>)：\n以一个含六值的(a,b,c,d,e,f)变换矩阵的形式指定一个2D变换，相当于直接应用一个[a,b,c,d,e,f]变换矩阵\n\t*\ttranslate(<length>[, <length>]):指定对象的2D translation（2D平移）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认值为0\n\t*\trotate(<angle>):指定对象的2D rotation（2D旋转），需先有transform-origin属性的定义\n\t*\tscale(<number>[, <number>])：指定对象的2D scale（2D缩放）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认取第一个参数的值\n\t*\tskew(angle[,angle]):指定对象skew transformation（斜切扭曲）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认值为0\n*\ttransform-origin\n\t*\t设置原点坐标，默认50% 50%\n\t\n##3D转换-transform\n*\ttransform\n\t*\trotateX(0deg)\t元素围绕x轴进行度数旋转\n\t*\trotateY(120deg)\t元素围绕Y轴进行度数旋转\n\t*\ttranslate3d(x,y,z)\n\n##过渡-transition\n*\ttransition\n\n\ttransition：[ transition-property ] || [ transition-duration ] || [ transition-timing-function ] || [ transition-delay ]\n\t\n\t```\n\t取值：\n\t[ transition-property ]：检索或设置对象中的参与过渡的属性\n\t\n\t[ transition-duration ]：检索或设置对象过渡的持续时间\n\t\n\t[ transition-timing-function ]：检索或设置对象中过渡的动画类型\n\n\t[ transition-delay ]：检索或设置对象延迟过渡的时间\n\t```\n\n##动画-animation\n*\tanimation\n\n\t语法\n\t\n\t```\n\tanimation：[[ animation-name ] || [ animation-duration ] || [ animation-timing-function ] || [ animation-delay ] || [ animation-iteration-count ] || [ animation-direction ]] [ , [ animation-name ] || [ animation-duration ] || [ animation-timing-function ] || [ animation-delay ] || [ animation-iteration-count ] || [ animation-direction ]]*\n\t```\n\t取值\n\t\n\t```\n\t[ animation-name ]：检索或设置对象所应用的动画名称\n\t\n\t[ animation-duration ]：检索或设置对象动画的持续时间\n\t\n\t[ animation-timing-function ]：检索或设置对象动画的过渡类型\n\t\t*\tlinear\t线性\n\t\t*\tease\t平滑\n\t\t*\tease-in\t由慢到快\n\t\t*\tease-out\t由快到慢\n\t\t*\tease-in-out\t慢-快-慢\n\t\n\t[ animation-delay ]：检索或设置对象动画延迟的时间\n\t\n\t[ animation-iteration-count ]：检索或设置对象动画的循环次数\n\t\t*\tinfinite\t无限循环\n\t\n\t[ animation-direction ]：检索或设置对象动画在循环中是否反向运动\n\t\t*\tnormal\t\n\t\t*\talternate\t反向\n\t\n\t[ animation-play-state ]：检索或设置对象动画的状态。\n\t\n\t[ animation-fill-mode ]：检索或设置对象动画时间之外的状态\n\t\t*\tnone\n\t\t*\tforwards\t设置为动画结束时的状态\n\t\t*\tbackwards\t设置为动画开始时的状态\n\t\t*\tboth\t结束或开始的状态\n\t```\n\t使用\n\t*\t@keyframes name  定义动画\n\t*\t动画内 0% ~100% 定义关键帧\n\t*\t动画元素使用animtion: name \n\t\n\t\n\n\t\n","source":"_posts/learn-css-part-two.md","raw":"title: learn css part two\ndate: 2015-06-23 15:54:29\ncategories: css\ntags: [front-end,animation]\n---\n##文字\n*\ttext-index\n\t\n\t对块级或者内联块级元素设置缩进\n*\ttext-transform\n\t*\tnone\n\t*\tcapitalize\t单词首字母转换成大写\n\t*\tuppercase\n\t*\tlowercase\n\n*\ttext-decoration\n\n\t对文字修饰(下划线，删除线)\n*\ttext-shadow\n\t*\t文字阴影\n*\ttext-fill-color\n\t*\t文字填充颜色\n\t*\t[demo](http://demo.doyoe.com/css3/text-fill-color/gradient-text.htm)\n*\ttext-stroke\n\t*\t文字描边\n*\tletter-spacing\n\t*\t文字间距\n*\tword-spacing\n\t*\t单词间距\n*\tword-wrap\n\t*\t换行\n\t*\tnormal | break-word\n*\twhite-space\n\t*\tnormal\n\t*\tpre\n\t*\tnowrap: 强制在同一行显示所有文本\n\t*\tpre-wrap: 碰到边界换行\n\t*\tpre-line: 碰到边界换行\n\n##列表\n*\tlist-style\n*\tlist-style-image\n*\tlist-style-position\n\t*\toutside\n\t*\tinside\n*\tlist-style-type\n\n##用户界面\t\n*\tbox-sizing\n\t*\tcontent-box (默认)\n\t\t\n\t\tpadding和border不被包含在定义的width和height之内,实际宽度= width + border+ padding\n\t\t\n\t*\tborder-box\n\t\tpadding和border包含在定义的width和height之内\n\n\n##2D变换-transform\n*\ttransform\n\t\n\t可用属性\n\t*\tnone\n\t*\tmatrix(<number>,<number>,<number>,<number>,<number>,<number>)：\n以一个含六值的(a,b,c,d,e,f)变换矩阵的形式指定一个2D变换，相当于直接应用一个[a,b,c,d,e,f]变换矩阵\n\t*\ttranslate(<length>[, <length>]):指定对象的2D translation（2D平移）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认值为0\n\t*\trotate(<angle>):指定对象的2D rotation（2D旋转），需先有transform-origin属性的定义\n\t*\tscale(<number>[, <number>])：指定对象的2D scale（2D缩放）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认取第一个参数的值\n\t*\tskew(angle[,angle]):指定对象skew transformation（斜切扭曲）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认值为0\n*\ttransform-origin\n\t*\t设置原点坐标，默认50% 50%\n\t\n##3D转换-transform\n*\ttransform\n\t*\trotateX(0deg)\t元素围绕x轴进行度数旋转\n\t*\trotateY(120deg)\t元素围绕Y轴进行度数旋转\n\t*\ttranslate3d(x,y,z)\n\n##过渡-transition\n*\ttransition\n\n\ttransition：[ transition-property ] || [ transition-duration ] || [ transition-timing-function ] || [ transition-delay ]\n\t\n\t```\n\t取值：\n\t[ transition-property ]：检索或设置对象中的参与过渡的属性\n\t\n\t[ transition-duration ]：检索或设置对象过渡的持续时间\n\t\n\t[ transition-timing-function ]：检索或设置对象中过渡的动画类型\n\n\t[ transition-delay ]：检索或设置对象延迟过渡的时间\n\t```\n\n##动画-animation\n*\tanimation\n\n\t语法\n\t\n\t```\n\tanimation：[[ animation-name ] || [ animation-duration ] || [ animation-timing-function ] || [ animation-delay ] || [ animation-iteration-count ] || [ animation-direction ]] [ , [ animation-name ] || [ animation-duration ] || [ animation-timing-function ] || [ animation-delay ] || [ animation-iteration-count ] || [ animation-direction ]]*\n\t```\n\t取值\n\t\n\t```\n\t[ animation-name ]：检索或设置对象所应用的动画名称\n\t\n\t[ animation-duration ]：检索或设置对象动画的持续时间\n\t\n\t[ animation-timing-function ]：检索或设置对象动画的过渡类型\n\t\t*\tlinear\t线性\n\t\t*\tease\t平滑\n\t\t*\tease-in\t由慢到快\n\t\t*\tease-out\t由快到慢\n\t\t*\tease-in-out\t慢-快-慢\n\t\n\t[ animation-delay ]：检索或设置对象动画延迟的时间\n\t\n\t[ animation-iteration-count ]：检索或设置对象动画的循环次数\n\t\t*\tinfinite\t无限循环\n\t\n\t[ animation-direction ]：检索或设置对象动画在循环中是否反向运动\n\t\t*\tnormal\t\n\t\t*\talternate\t反向\n\t\n\t[ animation-play-state ]：检索或设置对象动画的状态。\n\t\n\t[ animation-fill-mode ]：检索或设置对象动画时间之外的状态\n\t\t*\tnone\n\t\t*\tforwards\t设置为动画结束时的状态\n\t\t*\tbackwards\t设置为动画开始时的状态\n\t\t*\tboth\t结束或开始的状态\n\t```\n\t使用\n\t*\t@keyframes name  定义动画\n\t*\t动画内 0% ~100% 定义关键帧\n\t*\t动画元素使用animtion: name \n\t\n\t\n\n\t\n","slug":"learn-css-part-two","published":1,"updated":"2015-07-22T03:30:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cieodz8n4001uzt4oit1e04nc"},{"title":"learn css part one","date":"2015-06-18T03:15:26.000Z","_content":"##说明\n\n*\twebkit引擎的浏览器有：Safari, Google Chrome,前缀是-webkit-\n*\tGecko引擎浏览器：Mozilla,常指Firefox， 前缀 -moz-\n*\tPresto引擎浏览器：Opera，前缀 -o-\n*\tKHTML引擎浏览器：Konqueror， 前缀 -khtml-\n*\tTrident引擎浏览器：Internet Explorer, 前缀 -ms-\n\n\n##定位\n\n*\tposition\n\t\n\t*\t默认值：static\n\t*\trelative: 遵循正常文档流，但可通过top,right,bottom,left 偏移位置\n\t\n*\tz-index\n\t*\t默认值: auto\n\t*\t同级对象，写在后面的对象将会覆盖前面的\n\n##布局 \n\n*\tdisplay\n\t*\tnone: 隐藏，但是与visibility=hidden不同，不保留占用空间\n\t\n\t**说明**\n\t*\tIE7及以下浏览器不支持table相关的参数值\n\t*\t暂无浏览器支持ruby相关参数值\n\t*\tIE8不支持CSS3新增属性值：compact | ruby | ruby-base | ruby-text | ruby-base-group | ruby-text-group | box | inline-box。\n\t*\tIE9不支持compact | box | inline-box属性值。\t\u0010\n*\tfloat\n\t*\t属性值不为none时，忽略display属性值\n\t\n*\tvisibility\n\t*\tvisible,hidden,collapse（隐藏表格的行或列）\t*\t可视状态下必须保证父级元素也为可视。\n*\tclip\n\t*\t剪切对象可视区域（左上角为起始点）\n\t*\t默认值auto,不剪切\n\t\n\t使用：\n\t\n\t```\n\tclip:rect(0 auto, 35px 10px); -- IE7以下\n\tor\n\tclip:rect(0, auto,35px,10px);\n\t```\n\t\n##弹性布局\n*\tbox-orient\n\t*\thorizontal\t子元素水平排列\n\t*\tvertical\t子元素纵向排列\n\t*\tjs中使用boxOrient\n*\tbox-pack\n\t*\t子元素排列方式\n\t*\tstart\t\n\t*\tcenter\t全部居中\n\t*\tend\n\t*\tjustify 两端对其\n*\tbox-align\n\t*\t子元素开始位置\n\t*\tstart\n\t*\tcenter\n\t*\tend\n\t*\tbaseline\n\t*\tstretch (默认值)\t 自适应父级元素尺寸\n*\tbox-flex\n\t*\t分配占用父级元素的剩余空间比例\n*\tbox-flex-group\n\t*\t定义子元素所在的组\n*\tbox-ordinal-group\n\t*\t定义子元素显示顺序\n*\tbox-direction\n\t*\t子元素显示顺序\n\t*\tnormal\n\t*\treverse ，反转\n*\tbox-lines\n\t*\t是否多行显示\n\t*\tsingle, multiple\n\n##外补白\n*\tmargin，padding\n\t*\t内联对象仅可以设置左右，设置上下间距时必须使元素为块级或者内联块级\n\n##边框\n*\tborder-radius\n\t\n\t圆角边框，2个参数以'/'分割，每个参数允许设置1~4个参数值，第1个参数表示水平半径，第2个参数表示垂直半径，如第2个参数省略，则默认等于第1个参数\n\t\n\t水平半径：如果提供全部四个参数值，将按上左(top-left)、上右(top-right)、下右(bottom-right)、下左(bottom-left)的顺序作用于四个角。\n\t\n\t如果只提供一个，将用于全部的于四个角。\n\t\n\t如果提供两个，第一个用于上左(top-left)、下右(bottom-right)，第二个用于上右(top-right)、下左(bottom-left)。\n\t\n\t如果提供三个，第一个用于上左(top-left)，第二个用于上右(top-right)、下左(bottom-left)，第三个用于下右(bottom-right)。\n\t\n\t垂直半径也遵循以上4点。\n\n*\tbox-shadow\n\t\n\t阴影\n\t\n\t**语法**\n\t\n\t```\n\tbox-shadow：none | \\<shadow\\> \\[ , \\<shadow\\> \\]\\*\n\t\n\t\\<shadow\\> = inset? && [ \\<length\\>{2,4} && \\<color\\>? ]\n\t\n\t*\t\\<lenght\\>: 第1个长度值用来设置对象的阴影水平偏移值。可以为负值\n\t*\t\\<lenght\\>: 第2个长度值用来设置对象的阴影垂直偏移值。可以为负值\n\t*\t\\<lenght\\>: 如果提供了第3个长度值则用来设置对象的阴影模糊值。不允许负值\n\t*\t\\<lenght\\>: 如果提供了第4个长度值则用来设置对象的阴影外延值。不允许负值\n\t```\n\t\n\t使用\n\t\n\t\n\t>外阴影常规效果\n\t\n\t>box-shadow:5px 5px rgba(0,0,0,.6);\n\t\n\t>外阴影模糊外延效果\n\t\n\t>box-shadow:5px 5px 5px 10px rgba(0,0,0,.6);\n\t\n\t>内阴影效果\n\t\n\t>box-shadow:2px 2px 5px 1px rgba(0,0,0,.6) inset;\n\t\n\t\n\t\n*\t**box-reflect**\n\t\n\t文字倒影\n\t\n\t**语法**\n\t\n\t```\n\t\n\tbox-reflect：none | <direction> <offset>? <mask-box-image>?\n\t<direction> = above | below | left | right\n\t<offset> = <length> | <percentage>\n\t<mask-box-image> = none | <url> | <linear-gradient> | <radial-gradient> | \t<repeating-linear-gradient> | <repeating-radial-gradient>\n\t默认值：none\n\t\n\tnone：无倒影\n\t<direction>　Demo: 简单图片倒影\n\tabove：指定倒影在对象的上边\n\tbelow：指定倒影在对象的下边\n\tleft：指定倒影在对象的左边\n\tright：指定倒影在对象的右边\n\t<offset>　Demo: 图片与倒影间隔\n\t<length>：用长度值来定义倒影与对象之间的间隔。可以为负值\n\t<percentage>：用百分比来定义倒影与对象之间的间隔。可以为负值\n\t<mask-box-image>　Demo: 更真实的图片倒影 文字倒影与渐变\n\tnone：无遮罩图像\n\t<url>：使用绝对或相对地址指定遮罩图像。\n\t<linear-gradient>：使用线性渐变创建遮罩图像。\n\t<radial-gradient>：使用径向(放射性)渐变创建遮罩图像。\n\t<repeating-linear-gradient>：使用重复的线性渐变创建背遮罩像。\n\t<repeating-radial-gradient>：使用重复的径向(放射性)渐变创建遮罩图像。\n\t\n\t```\n\t\n\n##背景\n*\tbackground\n\t*\t允许指定多个image\n*\tbackground-attachment\n\t*\t设置背景图片位置\n\t*\tfixed,scroll(默认),local\n*\tbackground-origin\n\t*\t指定背景图片显示位置\n\t*\tpadding-box\t\t从padding区域开始显示\n\t*\tborder-box\t\t从border区域开始显示\n\t*\tcontent-box\t\t从content区域开始显示\n\n##颜色\n*\topacity\n\t*\t透明度\n\t\n\t**说明**\n\t\n\tIE使用filter实现\n##文字\n*\ttext-index\n\t\n\t对块级或者内联块级元素设置缩进\n*\ttext-transform\n\t*\tnone\n\t*\tcapitalize\t单词首字母转换成大写\n\t*\tuppercase\n\t*\tlowercase\n\n*\ttext-decoration\n\n\t对文字修饰\n\t*\t下划线，删除线\n*\ttext-shadow\n\t*\t文字阴影\n*\ttext-fill-color\n\t*\t文字填充颜色\n\t*\t[demo](http://demo.doyoe.com/css3/text-fill-color/gradient-text.htm)\n\t\n","source":"_posts/learn-css-part-one.md","raw":"title: learn css part one\ndate: 2015-06-18 11:15:26\ncategories: css\ntags: front-end\n---\n##说明\n\n*\twebkit引擎的浏览器有：Safari, Google Chrome,前缀是-webkit-\n*\tGecko引擎浏览器：Mozilla,常指Firefox， 前缀 -moz-\n*\tPresto引擎浏览器：Opera，前缀 -o-\n*\tKHTML引擎浏览器：Konqueror， 前缀 -khtml-\n*\tTrident引擎浏览器：Internet Explorer, 前缀 -ms-\n\n\n##定位\n\n*\tposition\n\t\n\t*\t默认值：static\n\t*\trelative: 遵循正常文档流，但可通过top,right,bottom,left 偏移位置\n\t\n*\tz-index\n\t*\t默认值: auto\n\t*\t同级对象，写在后面的对象将会覆盖前面的\n\n##布局 \n\n*\tdisplay\n\t*\tnone: 隐藏，但是与visibility=hidden不同，不保留占用空间\n\t\n\t**说明**\n\t*\tIE7及以下浏览器不支持table相关的参数值\n\t*\t暂无浏览器支持ruby相关参数值\n\t*\tIE8不支持CSS3新增属性值：compact | ruby | ruby-base | ruby-text | ruby-base-group | ruby-text-group | box | inline-box。\n\t*\tIE9不支持compact | box | inline-box属性值。\t\u0010\n*\tfloat\n\t*\t属性值不为none时，忽略display属性值\n\t\n*\tvisibility\n\t*\tvisible,hidden,collapse（隐藏表格的行或列）\t*\t可视状态下必须保证父级元素也为可视。\n*\tclip\n\t*\t剪切对象可视区域（左上角为起始点）\n\t*\t默认值auto,不剪切\n\t\n\t使用：\n\t\n\t```\n\tclip:rect(0 auto, 35px 10px); -- IE7以下\n\tor\n\tclip:rect(0, auto,35px,10px);\n\t```\n\t\n##弹性布局\n*\tbox-orient\n\t*\thorizontal\t子元素水平排列\n\t*\tvertical\t子元素纵向排列\n\t*\tjs中使用boxOrient\n*\tbox-pack\n\t*\t子元素排列方式\n\t*\tstart\t\n\t*\tcenter\t全部居中\n\t*\tend\n\t*\tjustify 两端对其\n*\tbox-align\n\t*\t子元素开始位置\n\t*\tstart\n\t*\tcenter\n\t*\tend\n\t*\tbaseline\n\t*\tstretch (默认值)\t 自适应父级元素尺寸\n*\tbox-flex\n\t*\t分配占用父级元素的剩余空间比例\n*\tbox-flex-group\n\t*\t定义子元素所在的组\n*\tbox-ordinal-group\n\t*\t定义子元素显示顺序\n*\tbox-direction\n\t*\t子元素显示顺序\n\t*\tnormal\n\t*\treverse ，反转\n*\tbox-lines\n\t*\t是否多行显示\n\t*\tsingle, multiple\n\n##外补白\n*\tmargin，padding\n\t*\t内联对象仅可以设置左右，设置上下间距时必须使元素为块级或者内联块级\n\n##边框\n*\tborder-radius\n\t\n\t圆角边框，2个参数以'/'分割，每个参数允许设置1~4个参数值，第1个参数表示水平半径，第2个参数表示垂直半径，如第2个参数省略，则默认等于第1个参数\n\t\n\t水平半径：如果提供全部四个参数值，将按上左(top-left)、上右(top-right)、下右(bottom-right)、下左(bottom-left)的顺序作用于四个角。\n\t\n\t如果只提供一个，将用于全部的于四个角。\n\t\n\t如果提供两个，第一个用于上左(top-left)、下右(bottom-right)，第二个用于上右(top-right)、下左(bottom-left)。\n\t\n\t如果提供三个，第一个用于上左(top-left)，第二个用于上右(top-right)、下左(bottom-left)，第三个用于下右(bottom-right)。\n\t\n\t垂直半径也遵循以上4点。\n\n*\tbox-shadow\n\t\n\t阴影\n\t\n\t**语法**\n\t\n\t```\n\tbox-shadow：none | \\<shadow\\> \\[ , \\<shadow\\> \\]\\*\n\t\n\t\\<shadow\\> = inset? && [ \\<length\\>{2,4} && \\<color\\>? ]\n\t\n\t*\t\\<lenght\\>: 第1个长度值用来设置对象的阴影水平偏移值。可以为负值\n\t*\t\\<lenght\\>: 第2个长度值用来设置对象的阴影垂直偏移值。可以为负值\n\t*\t\\<lenght\\>: 如果提供了第3个长度值则用来设置对象的阴影模糊值。不允许负值\n\t*\t\\<lenght\\>: 如果提供了第4个长度值则用来设置对象的阴影外延值。不允许负值\n\t```\n\t\n\t使用\n\t\n\t\n\t>外阴影常规效果\n\t\n\t>box-shadow:5px 5px rgba(0,0,0,.6);\n\t\n\t>外阴影模糊外延效果\n\t\n\t>box-shadow:5px 5px 5px 10px rgba(0,0,0,.6);\n\t\n\t>内阴影效果\n\t\n\t>box-shadow:2px 2px 5px 1px rgba(0,0,0,.6) inset;\n\t\n\t\n\t\n*\t**box-reflect**\n\t\n\t文字倒影\n\t\n\t**语法**\n\t\n\t```\n\t\n\tbox-reflect：none | <direction> <offset>? <mask-box-image>?\n\t<direction> = above | below | left | right\n\t<offset> = <length> | <percentage>\n\t<mask-box-image> = none | <url> | <linear-gradient> | <radial-gradient> | \t<repeating-linear-gradient> | <repeating-radial-gradient>\n\t默认值：none\n\t\n\tnone：无倒影\n\t<direction>　Demo: 简单图片倒影\n\tabove：指定倒影在对象的上边\n\tbelow：指定倒影在对象的下边\n\tleft：指定倒影在对象的左边\n\tright：指定倒影在对象的右边\n\t<offset>　Demo: 图片与倒影间隔\n\t<length>：用长度值来定义倒影与对象之间的间隔。可以为负值\n\t<percentage>：用百分比来定义倒影与对象之间的间隔。可以为负值\n\t<mask-box-image>　Demo: 更真实的图片倒影 文字倒影与渐变\n\tnone：无遮罩图像\n\t<url>：使用绝对或相对地址指定遮罩图像。\n\t<linear-gradient>：使用线性渐变创建遮罩图像。\n\t<radial-gradient>：使用径向(放射性)渐变创建遮罩图像。\n\t<repeating-linear-gradient>：使用重复的线性渐变创建背遮罩像。\n\t<repeating-radial-gradient>：使用重复的径向(放射性)渐变创建遮罩图像。\n\t\n\t```\n\t\n\n##背景\n*\tbackground\n\t*\t允许指定多个image\n*\tbackground-attachment\n\t*\t设置背景图片位置\n\t*\tfixed,scroll(默认),local\n*\tbackground-origin\n\t*\t指定背景图片显示位置\n\t*\tpadding-box\t\t从padding区域开始显示\n\t*\tborder-box\t\t从border区域开始显示\n\t*\tcontent-box\t\t从content区域开始显示\n\n##颜色\n*\topacity\n\t*\t透明度\n\t\n\t**说明**\n\t\n\tIE使用filter实现\n##文字\n*\ttext-index\n\t\n\t对块级或者内联块级元素设置缩进\n*\ttext-transform\n\t*\tnone\n\t*\tcapitalize\t单词首字母转换成大写\n\t*\tuppercase\n\t*\tlowercase\n\n*\ttext-decoration\n\n\t对文字修饰\n\t*\t下划线，删除线\n*\ttext-shadow\n\t*\t文字阴影\n*\ttext-fill-color\n\t*\t文字填充颜色\n\t*\t[demo](http://demo.doyoe.com/css3/text-fill-color/gradient-text.htm)\n\t\n","slug":"learn-css-part-one","published":1,"updated":"2015-07-22T03:30:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cieodz8n7001zzt4ocixdtoor"},{"title":"Javascript模块化","date":"2015-09-12T04:02:20.000Z","_content":"现下比较流行的模块化分为几大大阵营，一个是以RequireJS引领的AMD规范，还有就是以SeaJS为首的CMD规范，另外就是NodeJS引领的CommonJS规范。\n\n\n当然YUI阵营为主的使用的是比较传统的对象字面量模块的方式，这种方案带来的命名空间的分层，痛苦在于太多的命名空间需要去管理。\n\n\nCommonJS区别于AMD跟CMD的一点是，CommonJS 用在服务器端同步加载，AMD跟CMD用在浏览器端并且异步加载。\n\n\n对于依赖的模块，AMD 是提前执行，CMD 是延迟执行.\n\n\nAMD 的 API 默认是一个当多个用，CMD 的 API 严格区分，推崇职责单一。比如 AMD 里，require 分全局 require 和局部 require，都叫 require。CMD 里，没有全局 require，而是根据模块系统的完备性，提供 seajs.use 来实现模块系统的加载启动。CMD 里，每个 API 都简单纯粹。\n\n所有的模块化标准都基于一些默认规范：\n*\t模块引用 - require\n*\t模块定义\t- define\n*\t模块表示 - module\n\n\n\n\n##AMD\t(异步模块定义，Asynchronous Module Definition)\n\t\n具有代表性Javascript库是[RequireJS](http://requirejs.org/)跟[CurlJS](https://github.com/unscriptable/curl)\n*\tdefine\n\t\n```\n\tdefine(\n\t\tmodule_id,\n\t\t[dependencies],\n\t\tfactory\n\t)\n```\n\t*\tmodule_id 是模块名，命名规则是[CommonJS模块命名规范的超集](http://wiki.commonjs.org/wiki/Modules/1.1.1#Module_Identifiers)\n\t*\t[dependencies] 是当前定义的模块所以来的模块数组。\n\t*\tfactory 当模块初始化要执行的函数或者对象， 如果是函数则被执行，如果是对象则输出对象。\n\t\t\ndefine使用\t\n\n```\n\tdefine('product',['jquery'], function($){\n\t\tvar product = {\n\t\t\tadd: function(item){\n\t\t\t\t//add a prouct\n\t\t\t}\n\t\t};\n\t});\n```\n\t\n*\trequire\n\t\n```\n\trequire(\n\t\t[module_id],\n\t\tfactory\n\t)\n```\n*\t[module_id] 当前模块以来的模块数组\n*\tfactory 当模块初始化要执行的函数或者对象， 如果是函数则被执行，如果是对象则输出对象。\n\t\nrequire使用\n\n```\nrequire(['product'],function(product){\n\t\t// use product module\n\t\tproduct.add({\n\t\t\tid: 0\n\t\t});\n\t});\n```\n\n\n###AMD的优势\n\n*\t模块定义都被封装了起来，帮我们避免了全局命名空间的污染。\n*\t比其它替代方案（例如 CommonJS，我们马上会讨论到）效果更好。没有跨域、本地或调试带来的问题，也不依赖于服务器端工具。大多数 AMD 加载器都支持在浏览器中加载模块，而不须要一个构建的过程。\n*\t提供了一个“传输”方法来用在单个文件中包含多个模块。其它例如 CommonJS 这样的方式都尚没有对传输格式达成共识。\n*\t当需要时可以进行延迟加载。\n\n##CMD (通用模块定义, Common Module Definition)\n\t\n以[SeaJS](http://seajs.org/)为代表，在推行SeaJS过程中定义的一种规范。\n**在 CMD 规范中，一个模块就是一个文件**\n\t\n*\tdefine\n\n```\ndefine(factory)\n\ndefine(id?, deps?, factory)\n\n//例如：\ndefine(function(require,exports,module){\n\t//do something\n});\n```\n*\tfactory 为函数时，表示是模块的构造方法。执行该构造方法，可以得到模块向外提供的接口。factory 方法在执行时，默认会传入三个参数：require、exports 和 module\n\t\n*\trequire\n\n```\nrequire(id)\n\n//例如\ndefine(function(require,exports,module){\n\tvar $ = require('$');\n\t// do something\n});\n\n```\n*\texports\n\n在factory内部，exports 是一个对象，用来向外提供模块接口。\n\n```\ndefine(function(require,exports){\n\tvar product = {\n\t\tadd: function(){\n\t\t\n\t};\n\t\n\texports.product = product;\n});\n```\n\n\n\n###参考资料\n*\t[使用 AMD、CommonJS 及 ES Harmony 编写模块化的 JavaScript](http://justineo.github.io/singles/writing-modular-js/)\n*\t[CMD模块定义规范](https://github.com/seajs/seajs/issues/242)\n*\t[AMD定义规范](https://github.com/amdjs/amdjs-api/wiki/AMD-(%E4%B8%AD%E6%96%87%E7%89%88))\n*\t[AMD 和 CMD 的区别有哪些](http://www.zhihu.com/question/20351507)","source":"_posts/javascript-module.md","raw":"title: Javascript模块化\ndate: 2015-09-12 12:02:20\ncategories: javascript\ntags: javascript\n---\n现下比较流行的模块化分为几大大阵营，一个是以RequireJS引领的AMD规范，还有就是以SeaJS为首的CMD规范，另外就是NodeJS引领的CommonJS规范。\n\n\n当然YUI阵营为主的使用的是比较传统的对象字面量模块的方式，这种方案带来的命名空间的分层，痛苦在于太多的命名空间需要去管理。\n\n\nCommonJS区别于AMD跟CMD的一点是，CommonJS 用在服务器端同步加载，AMD跟CMD用在浏览器端并且异步加载。\n\n\n对于依赖的模块，AMD 是提前执行，CMD 是延迟执行.\n\n\nAMD 的 API 默认是一个当多个用，CMD 的 API 严格区分，推崇职责单一。比如 AMD 里，require 分全局 require 和局部 require，都叫 require。CMD 里，没有全局 require，而是根据模块系统的完备性，提供 seajs.use 来实现模块系统的加载启动。CMD 里，每个 API 都简单纯粹。\n\n所有的模块化标准都基于一些默认规范：\n*\t模块引用 - require\n*\t模块定义\t- define\n*\t模块表示 - module\n\n\n\n\n##AMD\t(异步模块定义，Asynchronous Module Definition)\n\t\n具有代表性Javascript库是[RequireJS](http://requirejs.org/)跟[CurlJS](https://github.com/unscriptable/curl)\n*\tdefine\n\t\n```\n\tdefine(\n\t\tmodule_id,\n\t\t[dependencies],\n\t\tfactory\n\t)\n```\n\t*\tmodule_id 是模块名，命名规则是[CommonJS模块命名规范的超集](http://wiki.commonjs.org/wiki/Modules/1.1.1#Module_Identifiers)\n\t*\t[dependencies] 是当前定义的模块所以来的模块数组。\n\t*\tfactory 当模块初始化要执行的函数或者对象， 如果是函数则被执行，如果是对象则输出对象。\n\t\t\ndefine使用\t\n\n```\n\tdefine('product',['jquery'], function($){\n\t\tvar product = {\n\t\t\tadd: function(item){\n\t\t\t\t//add a prouct\n\t\t\t}\n\t\t};\n\t});\n```\n\t\n*\trequire\n\t\n```\n\trequire(\n\t\t[module_id],\n\t\tfactory\n\t)\n```\n*\t[module_id] 当前模块以来的模块数组\n*\tfactory 当模块初始化要执行的函数或者对象， 如果是函数则被执行，如果是对象则输出对象。\n\t\nrequire使用\n\n```\nrequire(['product'],function(product){\n\t\t// use product module\n\t\tproduct.add({\n\t\t\tid: 0\n\t\t});\n\t});\n```\n\n\n###AMD的优势\n\n*\t模块定义都被封装了起来，帮我们避免了全局命名空间的污染。\n*\t比其它替代方案（例如 CommonJS，我们马上会讨论到）效果更好。没有跨域、本地或调试带来的问题，也不依赖于服务器端工具。大多数 AMD 加载器都支持在浏览器中加载模块，而不须要一个构建的过程。\n*\t提供了一个“传输”方法来用在单个文件中包含多个模块。其它例如 CommonJS 这样的方式都尚没有对传输格式达成共识。\n*\t当需要时可以进行延迟加载。\n\n##CMD (通用模块定义, Common Module Definition)\n\t\n以[SeaJS](http://seajs.org/)为代表，在推行SeaJS过程中定义的一种规范。\n**在 CMD 规范中，一个模块就是一个文件**\n\t\n*\tdefine\n\n```\ndefine(factory)\n\ndefine(id?, deps?, factory)\n\n//例如：\ndefine(function(require,exports,module){\n\t//do something\n});\n```\n*\tfactory 为函数时，表示是模块的构造方法。执行该构造方法，可以得到模块向外提供的接口。factory 方法在执行时，默认会传入三个参数：require、exports 和 module\n\t\n*\trequire\n\n```\nrequire(id)\n\n//例如\ndefine(function(require,exports,module){\n\tvar $ = require('$');\n\t// do something\n});\n\n```\n*\texports\n\n在factory内部，exports 是一个对象，用来向外提供模块接口。\n\n```\ndefine(function(require,exports){\n\tvar product = {\n\t\tadd: function(){\n\t\t\n\t};\n\t\n\texports.product = product;\n});\n```\n\n\n\n###参考资料\n*\t[使用 AMD、CommonJS 及 ES Harmony 编写模块化的 JavaScript](http://justineo.github.io/singles/writing-modular-js/)\n*\t[CMD模块定义规范](https://github.com/seajs/seajs/issues/242)\n*\t[AMD定义规范](https://github.com/amdjs/amdjs-api/wiki/AMD-(%E4%B8%AD%E6%96%87%E7%89%88))\n*\t[AMD 和 CMD 的区别有哪些](http://www.zhihu.com/question/20351507)","slug":"javascript-module","published":1,"updated":"2015-09-12T05:46:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cieodz8n90022zt4o5f6z2538"},{"title":"常用Ionic 命令整理","date":"2015-08-04T06:59:09.000Z","_content":"\n*\t添加crosswalk\n\n```\n\t//查看ionic现有的浏览器插件\n\tionic browser list\n\t\n\t//添加crosswald\n\tionic browser add crosswalk@11.40.277.7\n````\n\n*\t检查android SDK配置\n\n```\n\tbrew info android-sdk \n\t\n\t正确设置ANDROID_HOME\n```\n\n*\t编译\n\n```\n\tionic build android \n\t\n```\n\n\n*\t用IDEA打开编译后的Android项目\n\t*\t此处需要配置IDEA的开发环境\n\t*\tandroid的sdk目录\n\t*\t设置Gradle\n\t*\tSDK Setting\n\t*\t更新JDK至少7.0以上\n\t\n*\t设置 build.gradle\n\n\t```\n\t\tjniLibs.srcDirs = ['libs']\n\t```\n*\t设置crosswald.engine\n\n\t```\n\tsrc/org/crosswalk.engine/xwalkcordovaResourceClient\n\t\t\n\t\tif ((url.startsWith(\"http:\") || url.startsWith(\"https:\")) && parentEngine.pluginManager.shouldAllowRequest(url)) {\n\t```\n\n\n\n *\t安装到手机\n \n ```\n \t//编译ionic项目\n \tionic prepare\n \t\n \t生成 Signed APK（生成正式版的apk）\n \n \t//安装到真机\n \tadb install -r platforms/android/android-armv7-release.apk\n ```\n \n \n ##chrome 测试app\n \n ```\n \tchrome://inspect/#devices\n ```\n \n \n ----\n \n##插件\n\t \n```\n\tsudo npm install -g ionic\n\t\n\trm -rf cn.missfresh.wx\n\t\n\tionic plugin rm cn.missfresh.alipay\n\tionic plugin rm cn.missfresh.wx\n\t\n\t\n\tionic plugin add http://git.missfresh.net/frontend/im-plugin.git\n\t\n\tionic plugin add http://git.missfresh.net/frontend/alipay.git\n\t\n\tionic plugin add http://git.missfresh.net/frontend/wechat-plugin.git\n\t\n```\n*\t更新\n\t\n\t```\n\t\n\tionic lib\n\t\n\tionic lib update \n\t\n\t\n\tionic browser upgrade\n\t\n\t```\n\t\n\n##重置插件\n\n```\n\tionic browser rm crosswalk\n\tionic plugin list\n\t\n\tionic plugin list | awk '{print $1}'\n\t\n\tionic plugin list | awk '{print $1}'|xargs -I{} ionic plugin rm {}\n\t\n\tionic platform rm ios\n\t\n\tionic platform rm android\n\t\n\tionic browser list\t\n\t\n\tionic browser add crosswalk\n\t\t\t\n\tionic plugin\n\t\n\trm -rf plugins/cn.missfresh.*\n\t\n\trm -rf plugins/cn.*\n\t\n\t修改 package.json\n\t\n\tionic state restore\n\t\n\t\n```\n\n##启动\n\n```\nionic serve -d\t\t关闭livereload\nionic serve -p 8080\t修改启动服务端口     \n```\n\n\n##Nginx\n\n*\tvi /usr/local/etc/nginx/servers/as.conf\t\n\t\n\t--修改配置\n\t\n\t--as.conf 为自定义配置文件\n*\tsudo nginx -s reload\n\t\n\t--重新载入配置\t\n","source":"_posts/ionic-commonds.md","raw":"title: 常用Ionic 命令整理\ndate: 2015-08-04 14:59:09\ncategories: [ionic]\ntags: [ionic,cmd]\n---\n\n*\t添加crosswalk\n\n```\n\t//查看ionic现有的浏览器插件\n\tionic browser list\n\t\n\t//添加crosswald\n\tionic browser add crosswalk@11.40.277.7\n````\n\n*\t检查android SDK配置\n\n```\n\tbrew info android-sdk \n\t\n\t正确设置ANDROID_HOME\n```\n\n*\t编译\n\n```\n\tionic build android \n\t\n```\n\n\n*\t用IDEA打开编译后的Android项目\n\t*\t此处需要配置IDEA的开发环境\n\t*\tandroid的sdk目录\n\t*\t设置Gradle\n\t*\tSDK Setting\n\t*\t更新JDK至少7.0以上\n\t\n*\t设置 build.gradle\n\n\t```\n\t\tjniLibs.srcDirs = ['libs']\n\t```\n*\t设置crosswald.engine\n\n\t```\n\tsrc/org/crosswalk.engine/xwalkcordovaResourceClient\n\t\t\n\t\tif ((url.startsWith(\"http:\") || url.startsWith(\"https:\")) && parentEngine.pluginManager.shouldAllowRequest(url)) {\n\t```\n\n\n\n *\t安装到手机\n \n ```\n \t//编译ionic项目\n \tionic prepare\n \t\n \t生成 Signed APK（生成正式版的apk）\n \n \t//安装到真机\n \tadb install -r platforms/android/android-armv7-release.apk\n ```\n \n \n ##chrome 测试app\n \n ```\n \tchrome://inspect/#devices\n ```\n \n \n ----\n \n##插件\n\t \n```\n\tsudo npm install -g ionic\n\t\n\trm -rf cn.missfresh.wx\n\t\n\tionic plugin rm cn.missfresh.alipay\n\tionic plugin rm cn.missfresh.wx\n\t\n\t\n\tionic plugin add http://git.missfresh.net/frontend/im-plugin.git\n\t\n\tionic plugin add http://git.missfresh.net/frontend/alipay.git\n\t\n\tionic plugin add http://git.missfresh.net/frontend/wechat-plugin.git\n\t\n```\n*\t更新\n\t\n\t```\n\t\n\tionic lib\n\t\n\tionic lib update \n\t\n\t\n\tionic browser upgrade\n\t\n\t```\n\t\n\n##重置插件\n\n```\n\tionic browser rm crosswalk\n\tionic plugin list\n\t\n\tionic plugin list | awk '{print $1}'\n\t\n\tionic plugin list | awk '{print $1}'|xargs -I{} ionic plugin rm {}\n\t\n\tionic platform rm ios\n\t\n\tionic platform rm android\n\t\n\tionic browser list\t\n\t\n\tionic browser add crosswalk\n\t\t\t\n\tionic plugin\n\t\n\trm -rf plugins/cn.missfresh.*\n\t\n\trm -rf plugins/cn.*\n\t\n\t修改 package.json\n\t\n\tionic state restore\n\t\n\t\n```\n\n##启动\n\n```\nionic serve -d\t\t关闭livereload\nionic serve -p 8080\t修改启动服务端口     \n```\n\n\n##Nginx\n\n*\tvi /usr/local/etc/nginx/servers/as.conf\t\n\t\n\t--修改配置\n\t\n\t--as.conf 为自定义配置文件\n*\tsudo nginx -s reload\n\t\n\t--重新载入配置\t\n","slug":"ionic-commonds","published":1,"updated":"2015-08-04T07:04:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cieodz8nb0025zt4olrum004k"},{"title":"用hexo在github上建立blog","date":"2015-06-11T12:56:58.000Z","_content":"\n#用hexo在github上建立blog\n\n同事@icepy是个极客，看到他一直在用github pages建立的blog，感觉很不错，刚好又赶上自己的blog因为域名解析问题暂时无法访问，所以就开始着手利用自己的github账号创建一个。\n\n*\t**准备资料**\n\t\n\t*\t[github pages](https://pages.github.com/)\n\t*\t安装指引\t\n\t\t*\t[指引1](http://blog.fens.me/hexo-blog-github/)\n\t\t*\t[指引2](http://ibruce.info/2013/11/22/hexo-your-blog/)\n\t\t\n\t*\t[hexo](https://github.com/hexojs/hexo) - node.js开发的静态文件生成插件\n\t*\t主题安装\n\t*\t[MarkDown语法](http://www.appinn.com/markdown/)\n\t\n\t\n*\t问题\n\n\t根据以上教程安装配置，基本没啥大问题，以下是自己遇到的一些问题：\n\t\n\t*\tgithub上建立新库时，一定要注意跟自己github用户名保持一致，我自己的英文名，姓名姓名缩写跟全拼都被别人给占去了，伤心呀\n\t\n\t*\thexo的全局配置文件，一定要仔细阅读一下，我就是因为域名配置错误，修改了n次依然有问题后，直接删掉github库重新搞了一次\n\t\n\t*\t使用主题时注意顶部菜单的连接地址，如果要加上categories\n\t\n\t```\n\t/themes/主题名称/_config.yml 参考：\n\tmenu:\n  \t\tHome: /\n  \t\tArchives: /archives\n  \t\tAbout: /categories/About/\n\t```\n\t\n\t*\t写文章的时候，注意tags:跟categories: 的冒号后面要跟一个空格，否则编译时会报错。\n\t\n\t*\t命令移动文件\n\t\t\n\t\t```\n\t\t当前在hexo创建的blog目录下:\n\t\tcp -r public/* ~/Documents/GitHubFiles/yuanxj1024.github.io\n\t\t```\n\t\n[github 个人blog](http://yuanxj1024.github.io)\n\n\n\n\n\n\n\n\n\n","source":"_posts/hexo.md","raw":"title: 用hexo在github上建立blog\ndate: 2015-06-11 20:56:58\ncategories: [experience]\ntags: [experience,github,hexo]\n---\n\n#用hexo在github上建立blog\n\n同事@icepy是个极客，看到他一直在用github pages建立的blog，感觉很不错，刚好又赶上自己的blog因为域名解析问题暂时无法访问，所以就开始着手利用自己的github账号创建一个。\n\n*\t**准备资料**\n\t\n\t*\t[github pages](https://pages.github.com/)\n\t*\t安装指引\t\n\t\t*\t[指引1](http://blog.fens.me/hexo-blog-github/)\n\t\t*\t[指引2](http://ibruce.info/2013/11/22/hexo-your-blog/)\n\t\t\n\t*\t[hexo](https://github.com/hexojs/hexo) - node.js开发的静态文件生成插件\n\t*\t主题安装\n\t*\t[MarkDown语法](http://www.appinn.com/markdown/)\n\t\n\t\n*\t问题\n\n\t根据以上教程安装配置，基本没啥大问题，以下是自己遇到的一些问题：\n\t\n\t*\tgithub上建立新库时，一定要注意跟自己github用户名保持一致，我自己的英文名，姓名姓名缩写跟全拼都被别人给占去了，伤心呀\n\t\n\t*\thexo的全局配置文件，一定要仔细阅读一下，我就是因为域名配置错误，修改了n次依然有问题后，直接删掉github库重新搞了一次\n\t\n\t*\t使用主题时注意顶部菜单的连接地址，如果要加上categories\n\t\n\t```\n\t/themes/主题名称/_config.yml 参考：\n\tmenu:\n  \t\tHome: /\n  \t\tArchives: /archives\n  \t\tAbout: /categories/About/\n\t```\n\t\n\t*\t写文章的时候，注意tags:跟categories: 的冒号后面要跟一个空格，否则编译时会报错。\n\t\n\t*\t命令移动文件\n\t\t\n\t\t```\n\t\t当前在hexo创建的blog目录下:\n\t\tcp -r public/* ~/Documents/GitHubFiles/yuanxj1024.github.io\n\t\t```\n\t\n[github 个人blog](http://yuanxj1024.github.io)\n\n\n\n\n\n\n\n\n\n","slug":"hexo","published":1,"updated":"2015-06-11T13:28:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cieodz8nh002czt4o9cpmelzd"},{"title":"Hello World","_content":"Welcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"title: Hello World\n---\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2015-06-11T09:54:34.000Z","updated":"2015-06-11T09:54:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cieodz8nl002kzt4okyy2ft3d"},{"title":"directive:lazy-load","date":"2015-06-19T01:55:20.000Z","_content":"#自定义指令:图片延迟加载\n\n\n###前言\n\nweb App跟web毕竟是不同，考虑到用户在使用web app时的数据流量，已经首次加载速度，所以对于页面的一些图片采用延迟加载还是很必要的，下面记录下自己开发延迟加载指令的过程。\n\n###实现思路\n\n图片肯定有所以来的容器元素，容器元素在屏幕上的可视范围内的图片要加载进来，所以需要监听容器的滚动事件，计算出当前滚动的位置跟图片的位置判断是否加载图片。\n\n我在开发该指令时，因为项目中已经有个在图片未加载完成是显示loading条的指令，所以我直接在此基础上进行扩展，目的是对使用该指令的图片进行延迟记在，页面上基本不用改动。\n\n##指令开发\n\n*\t容器指令\n\n\t只是用来标记图片所在的容器\n\t\n\t```\n\tmyApp.directive('yxjImageContainer', function($compile){\n  \t\treturn {\n\t    \trestrict: 'AC',\n\t    \tcontroller: ['$scope', '$element', function($scope,$element){\n    \t  \t\t$element.data('yxjImageContainer', $element);\n    \t\t}]\n  \t\t};\n\t});\n\t```\n\n*\t图片延迟加载指令\n\n\t**实现思路**\n\t\n\t*\t找到容器元素\n\t\n\t```\n\tvar container = element.inheritedData('yxjImageContainer');\n\t```\n\t*\t需要知道容器的滚动距离\n\t\n\t```\n     \t//获取容器的滚动距离\n        var _getContainerScrollTop = function() {\n          if(container.scrollTop && container.scrollTop()) {\n            return container.scrollTop();\n          }\n          var first = container[0];\n          if (first && first.pageYOffset !== undefined) {\n            return first.pageYOffset;\n          }\n          else if (first && first.scrollTop) {\n            return first.scrollTop;\n          }\n          return document.documentElement.scrollTop || 0;\n        };\n\t```\n\t*\t容器的高度\n\t\n\t```\n\t\t var _getContainerInnerHeight = function() {\n          if(container.innerHeight) {\n            return container.innerHeight;\n          }\n\n          var first = container[0];\n          if(first && first.innerHeight) {\n            return first.innerHeight;\n          } else if(first && first.clientHeight) {\n            return first.clientHeight;\n          }\n          return document.documentElement.clientHeight || 0;\n        };\n\t```\n\t*\t图片元素所在位置\n\t\n\t```\n    \t//获取元素top\n        var _getElementOffset = function() {\n          if(element.offset){\n            return element.offset().top;\n          }\n          var box = element[0].getBoundingClientRect();\n          return box.top + _getContainerScrollTop() - document.documentElement.clientTop;\n        };\n\t```\n\t*\t监听容器的滚动事件，判断当前图片元素是否需要加载\n\t\n\t```\n        var _onViewChange = function(bool) {\n          var height = _getContainerInnerHeight(),\n              scroll = _getContainerScrollTop(),\n              eleOffset = container[0] === $window ? _getElementOffset() : _getElementOffsetContainer(),\n              windownBottom = container[0] === $window ? height + scroll: height;\n\n          var remaining = eleOffset - windownBottom,\n              shouldLoad = remaining <= offset;\n          if(shouldLoad && !loaded) {\n            _renderImage();\n          }\n        };\n        \n        container.on('scroll', _onViewChange);\n\t```\n\t*\t加载图片并显示，取消容器的滚动事件\n\t\n\t```\n\t//加载图片\n        var _renderImage = function() {\n          loaded = true;\n          var imageDom = angular.element(element[0].querySelector('img'));\n          imageDom[0].src = attrs['ngSrc'];\n\n          imageDom.on('load', function() {\n            element.removeClass('loading');\n            imageDom.css('visibility', 'visible');\n          }).on('error', function() {\n            element.addClass('loading');\n            imageDom.css('visibility', 'hidden');\n          });\n          container && container.off('scroll', _onViewChange);\n        };\n\t```\n\n**完整demo** [gthub](https://github.com/yuanxj1024/angular-lazy-load-driective)\n\n\n###遇到的问题\n*\tangular中操作dom\n\t\n\tangular中支持jqLite；通过document.getXXX()等方法获取的元素需要使用angular.element()装换成angular中的对象\n\t\n\t[angular.element](https://docs.angularjs.org/api/ng/function/angular.element)\n\t\n\t\n###参考资料\n\n*\t很强大的一个[image-lazy-load](https://github.com/afklm/ng-lazy-image)\n","source":"_posts/directive-lazy-load.md","raw":"title: 'directive:lazy-load'\ndate: 2015-06-19 09:55:20\ncategories: angularjs\ntags: [angularjs,directive]\n---\n#自定义指令:图片延迟加载\n\n\n###前言\n\nweb App跟web毕竟是不同，考虑到用户在使用web app时的数据流量，已经首次加载速度，所以对于页面的一些图片采用延迟加载还是很必要的，下面记录下自己开发延迟加载指令的过程。\n\n###实现思路\n\n图片肯定有所以来的容器元素，容器元素在屏幕上的可视范围内的图片要加载进来，所以需要监听容器的滚动事件，计算出当前滚动的位置跟图片的位置判断是否加载图片。\n\n我在开发该指令时，因为项目中已经有个在图片未加载完成是显示loading条的指令，所以我直接在此基础上进行扩展，目的是对使用该指令的图片进行延迟记在，页面上基本不用改动。\n\n##指令开发\n\n*\t容器指令\n\n\t只是用来标记图片所在的容器\n\t\n\t```\n\tmyApp.directive('yxjImageContainer', function($compile){\n  \t\treturn {\n\t    \trestrict: 'AC',\n\t    \tcontroller: ['$scope', '$element', function($scope,$element){\n    \t  \t\t$element.data('yxjImageContainer', $element);\n    \t\t}]\n  \t\t};\n\t});\n\t```\n\n*\t图片延迟加载指令\n\n\t**实现思路**\n\t\n\t*\t找到容器元素\n\t\n\t```\n\tvar container = element.inheritedData('yxjImageContainer');\n\t```\n\t*\t需要知道容器的滚动距离\n\t\n\t```\n     \t//获取容器的滚动距离\n        var _getContainerScrollTop = function() {\n          if(container.scrollTop && container.scrollTop()) {\n            return container.scrollTop();\n          }\n          var first = container[0];\n          if (first && first.pageYOffset !== undefined) {\n            return first.pageYOffset;\n          }\n          else if (first && first.scrollTop) {\n            return first.scrollTop;\n          }\n          return document.documentElement.scrollTop || 0;\n        };\n\t```\n\t*\t容器的高度\n\t\n\t```\n\t\t var _getContainerInnerHeight = function() {\n          if(container.innerHeight) {\n            return container.innerHeight;\n          }\n\n          var first = container[0];\n          if(first && first.innerHeight) {\n            return first.innerHeight;\n          } else if(first && first.clientHeight) {\n            return first.clientHeight;\n          }\n          return document.documentElement.clientHeight || 0;\n        };\n\t```\n\t*\t图片元素所在位置\n\t\n\t```\n    \t//获取元素top\n        var _getElementOffset = function() {\n          if(element.offset){\n            return element.offset().top;\n          }\n          var box = element[0].getBoundingClientRect();\n          return box.top + _getContainerScrollTop() - document.documentElement.clientTop;\n        };\n\t```\n\t*\t监听容器的滚动事件，判断当前图片元素是否需要加载\n\t\n\t```\n        var _onViewChange = function(bool) {\n          var height = _getContainerInnerHeight(),\n              scroll = _getContainerScrollTop(),\n              eleOffset = container[0] === $window ? _getElementOffset() : _getElementOffsetContainer(),\n              windownBottom = container[0] === $window ? height + scroll: height;\n\n          var remaining = eleOffset - windownBottom,\n              shouldLoad = remaining <= offset;\n          if(shouldLoad && !loaded) {\n            _renderImage();\n          }\n        };\n        \n        container.on('scroll', _onViewChange);\n\t```\n\t*\t加载图片并显示，取消容器的滚动事件\n\t\n\t```\n\t//加载图片\n        var _renderImage = function() {\n          loaded = true;\n          var imageDom = angular.element(element[0].querySelector('img'));\n          imageDom[0].src = attrs['ngSrc'];\n\n          imageDom.on('load', function() {\n            element.removeClass('loading');\n            imageDom.css('visibility', 'visible');\n          }).on('error', function() {\n            element.addClass('loading');\n            imageDom.css('visibility', 'hidden');\n          });\n          container && container.off('scroll', _onViewChange);\n        };\n\t```\n\n**完整demo** [gthub](https://github.com/yuanxj1024/angular-lazy-load-driective)\n\n\n###遇到的问题\n*\tangular中操作dom\n\t\n\tangular中支持jqLite；通过document.getXXX()等方法获取的元素需要使用angular.element()装换成angular中的对象\n\t\n\t[angular.element](https://docs.angularjs.org/api/ng/function/angular.element)\n\t\n\t\n###参考资料\n\n*\t很强大的一个[image-lazy-load](https://github.com/afklm/ng-lazy-image)\n","slug":"directive-lazy-load","published":1,"updated":"2015-06-19T03:51:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cieodz8nn002lzt4ovjucxer4"},{"title":"使用chrome浏览器在Android上调试web页面","date":"2015-07-13T09:51:18.000Z","_content":"在移动开发中，移动版页面调试是个头疼的问题，强大google发明了如何使用chrome调试android上的web页面\n\n##要求\n*\t首先是你的机器上已经安装了chrome 32（版本或以上）浏览器\n*\t一根连接安卓设备的usb连接线\n*\t手机上的android系统版本必须在4.0+并且安装了chrome for android 浏览器\n\n\n步骤：\n\n*\t手机上开启开发者选项\n*\t连接上数据线\n*\t电脑打开chrome浏览器，地址栏输入：chrome://inspect, 回车,会出现类似下图：\n\t![chrome://inspect的结果](http://7xix26.com1.z0.glb.clouddn.com/inspect.png)\n\n*\t手机上打开chrome浏览器，输入一个地址，此处使用www.baidu.com\n*\t点击上图中**inspect**按钮，会弹出一个新层，如图:\n\t![inspect弹出层](http://7xix26.com1.z0.glb.clouddn.com/console.png)\n\t\n*\t后续步骤就跟在电脑上调试web页面一样的步骤了。\n\n\n参考资料：\n\n[Remote Debugging on Android with Chrome](https://developer.chrome.com/devtools/docs/remote-debugging)\n","source":"_posts/debug-web-on-android.md","raw":"title: 使用chrome浏览器在Android上调试web页面\ndate: 2015-07-13 17:51:18\ncategories: Tools\ntags: [debug,tool,chrome]\n---\n在移动开发中，移动版页面调试是个头疼的问题，强大google发明了如何使用chrome调试android上的web页面\n\n##要求\n*\t首先是你的机器上已经安装了chrome 32（版本或以上）浏览器\n*\t一根连接安卓设备的usb连接线\n*\t手机上的android系统版本必须在4.0+并且安装了chrome for android 浏览器\n\n\n步骤：\n\n*\t手机上开启开发者选项\n*\t连接上数据线\n*\t电脑打开chrome浏览器，地址栏输入：chrome://inspect, 回车,会出现类似下图：\n\t![chrome://inspect的结果](http://7xix26.com1.z0.glb.clouddn.com/inspect.png)\n\n*\t手机上打开chrome浏览器，输入一个地址，此处使用www.baidu.com\n*\t点击上图中**inspect**按钮，会弹出一个新层，如图:\n\t![inspect弹出层](http://7xix26.com1.z0.glb.clouddn.com/console.png)\n\t\n*\t后续步骤就跟在电脑上调试web页面一样的步骤了。\n\n\n参考资料：\n\n[Remote Debugging on Android with Chrome](https://developer.chrome.com/devtools/docs/remote-debugging)\n","slug":"debug-web-on-android","published":1,"updated":"2015-07-13T10:05:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cieodz8np002qzt4oidvb0y71"},{"title":"腾讯X5浏览器调试","date":"2015-07-22T03:15:09.000Z","_content":"\n朋友分享出来的一篇文章，当真实用的紧：[微信、手Q、Qzone之x5内核inspect调试解决方案](http://bbs.mb.qq.com/thread-243399-1-1.html) ，迫不及待的按照攻略来了一遍，就赶紧拿出来分享了，详细不步骤里面说的很清楚，我来说说mac下配置遇到的一些问题。\n\n*\tpython版本\n\t\n\tmac os 自带的python版本是2.7 ，上面攻略中需要使用python3.4,所以需要升级Python,升级攻略参考:[如何将Mac OS X10.9下的Python2.7升级到最新的Python3.3](http://www.cnblogs.com/nokiaguy/p/3456590.html),升级到3.4步骤一致\n\t\n\t**注意**\n\t本人安装python 3.4完成以后，不能使用python命令，需要使用python3.4， 想要使用python需要自己去做个软连接\n\t\n*\t安装过程\n\t\n\t整个安装过程很顺利，唯独到了安装chrome inspector的时候遇到了问题，教程中也有人遇到了问题，所以本人编译时用的命令是：\n\t\n\t```\n\tsudo python inspector.py --adb /usr/local/bin/adb\n\t```\n\t\n*\t结果截图\n\n\t![启动图](http://7xix26.com1.z0.glb.clouddn.com/x51.png)\n\t\n\t![调试图](http://7xix26.com1.z0.glb.clouddn.com/x52.png)\n\t","source":"_posts/debug-for-X5.md","raw":"title: 腾讯X5浏览器调试\ndate: 2015-07-22 11:15:09\ncategories: Tools\ntags: [tool,front-end,chrome,debug,webapp]\n---\n\n朋友分享出来的一篇文章，当真实用的紧：[微信、手Q、Qzone之x5内核inspect调试解决方案](http://bbs.mb.qq.com/thread-243399-1-1.html) ，迫不及待的按照攻略来了一遍，就赶紧拿出来分享了，详细不步骤里面说的很清楚，我来说说mac下配置遇到的一些问题。\n\n*\tpython版本\n\t\n\tmac os 自带的python版本是2.7 ，上面攻略中需要使用python3.4,所以需要升级Python,升级攻略参考:[如何将Mac OS X10.9下的Python2.7升级到最新的Python3.3](http://www.cnblogs.com/nokiaguy/p/3456590.html),升级到3.4步骤一致\n\t\n\t**注意**\n\t本人安装python 3.4完成以后，不能使用python命令，需要使用python3.4， 想要使用python需要自己去做个软连接\n\t\n*\t安装过程\n\t\n\t整个安装过程很顺利，唯独到了安装chrome inspector的时候遇到了问题，教程中也有人遇到了问题，所以本人编译时用的命令是：\n\t\n\t```\n\tsudo python inspector.py --adb /usr/local/bin/adb\n\t```\n\t\n*\t结果截图\n\n\t![启动图](http://7xix26.com1.z0.glb.clouddn.com/x51.png)\n\t\n\t![调试图](http://7xix26.com1.z0.glb.clouddn.com/x52.png)\n\t","slug":"debug-for-X5","published":1,"updated":"2015-07-22T03:26:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cieodz8nt002xzt4oe1ayikzd"},{"title":"css动画学习-立方体","date":"2015-06-26T01:41:34.000Z","_content":"**思路**\n一个正方体有6个面，所以我们需要个div中包含6个div，在3d模式下，z轴偏移出部分距离，然后6个面分别围绕x轴，Y轴旋转90deg,或者180deg即可，若使立方体旋转起来，让容器旋转起来就ok了。\n\n\n##实现步骤\n1.\t容器.container\n\t*\t容器的position设置为absolute,方便将容器定位，留给3d足够的显示空间\n\t*\t设置perspective为400px,给3d足够的视图距离\n\t\n\t```\n\t定义和用法\n\tperspective 属性定义 3D 元素距视图的距离，以像素计。该属性允许您改变 3D 元素查看 3D 元素的视图。\n\t当为元素定义 perspective 属性时，其子元素会获得透视效果，而不是元素本身。\n\t注释：perspective 属性只影响 3D 转换元素。\n\t```\n2.\t创建立方体div.square包含6个div\n\n\t```\n\temmet语法:\n\tdiv.square>div{$}*6\n\t```\n3.\t设置容器.square样式\n\t*\ttransform-origin 设置原点为50%\n\t*\ttransform-style: preserve-3d 设置3d显示模式\n\t*\t设置6个面的position为absolute,因为6个面要进行3d移动定位\n4.\t设置正前方的面\n\t*\t这个面很简单，直接在z轴上偏移出来即可\n\t\n\t```\n\ttransform: translateZ(100px);\n\t\n\t```\n5.\t设置右侧的面\n\t*\t这个面向Z轴偏移的同时，在Y轴上旋转90度\n\t*\t**Y轴旋转以逆时针为正向**\n\t*\t**X轴旋转顺时针针为正向**\t\n6.\t设置正前方正后方的面\n\t*\tY轴旋转180度，z轴偏移100px\n7.\t设置左侧的面\n\t*\tY轴旋转-90度，z轴偏移100px\n8.\t设置上方的面\n\t*\tX轴旋转90度，z轴偏移100px\n9.\t设置下方的面\n\t*\tX轴旋转-90度，z轴偏移100px\n\n##旋转\n让立方体旋转需要使用动画\n*\t使用@keyframes创建关键帧\n*\t例如：\n\t\n```\n\t@keyframes rotate{\n\t\t\t0%{\n\t\t    transform:rotateX(0deg) rotateY(0deg);\n\t\t\t}\n\t\t\t50%{\n\t\t    transform:rotateX(180deg) rotateY(360deg);\n\t\t\t}\n\t\t\t100%{\n\t\t    transform:rotateX(-360deg) rotateY(-360deg);\n\t\t\t}\n\t\t}\n\t\t\n```\n\n##演示\n[在线demo](http://runjs.cn/detail/00oeh2lf)","source":"_posts/css-animation-practice-1.md","raw":"title: css动画学习-立方体\ndate: 2015-06-26 09:41:34\ncategories: css\ntags: [css3,animation]\n---\n**思路**\n一个正方体有6个面，所以我们需要个div中包含6个div，在3d模式下，z轴偏移出部分距离，然后6个面分别围绕x轴，Y轴旋转90deg,或者180deg即可，若使立方体旋转起来，让容器旋转起来就ok了。\n\n\n##实现步骤\n1.\t容器.container\n\t*\t容器的position设置为absolute,方便将容器定位，留给3d足够的显示空间\n\t*\t设置perspective为400px,给3d足够的视图距离\n\t\n\t```\n\t定义和用法\n\tperspective 属性定义 3D 元素距视图的距离，以像素计。该属性允许您改变 3D 元素查看 3D 元素的视图。\n\t当为元素定义 perspective 属性时，其子元素会获得透视效果，而不是元素本身。\n\t注释：perspective 属性只影响 3D 转换元素。\n\t```\n2.\t创建立方体div.square包含6个div\n\n\t```\n\temmet语法:\n\tdiv.square>div{$}*6\n\t```\n3.\t设置容器.square样式\n\t*\ttransform-origin 设置原点为50%\n\t*\ttransform-style: preserve-3d 设置3d显示模式\n\t*\t设置6个面的position为absolute,因为6个面要进行3d移动定位\n4.\t设置正前方的面\n\t*\t这个面很简单，直接在z轴上偏移出来即可\n\t\n\t```\n\ttransform: translateZ(100px);\n\t\n\t```\n5.\t设置右侧的面\n\t*\t这个面向Z轴偏移的同时，在Y轴上旋转90度\n\t*\t**Y轴旋转以逆时针为正向**\n\t*\t**X轴旋转顺时针针为正向**\t\n6.\t设置正前方正后方的面\n\t*\tY轴旋转180度，z轴偏移100px\n7.\t设置左侧的面\n\t*\tY轴旋转-90度，z轴偏移100px\n8.\t设置上方的面\n\t*\tX轴旋转90度，z轴偏移100px\n9.\t设置下方的面\n\t*\tX轴旋转-90度，z轴偏移100px\n\n##旋转\n让立方体旋转需要使用动画\n*\t使用@keyframes创建关键帧\n*\t例如：\n\t\n```\n\t@keyframes rotate{\n\t\t\t0%{\n\t\t    transform:rotateX(0deg) rotateY(0deg);\n\t\t\t}\n\t\t\t50%{\n\t\t    transform:rotateX(180deg) rotateY(360deg);\n\t\t\t}\n\t\t\t100%{\n\t\t    transform:rotateX(-360deg) rotateY(-360deg);\n\t\t\t}\n\t\t}\n\t\t\n```\n\n##演示\n[在线demo](http://runjs.cn/detail/00oeh2lf)","slug":"css-animation-practice-1","published":1,"updated":"2015-06-26T03:02:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cieodz8nw0034zt4o2m0ipi6m"}],"PostAsset":[],"PostCategory":[{"post_id":"cieodz8lq0000zt4o7kmm0ooz","category_id":"cieodz8lv0001zt4o13yb89fr","_id":"cieodz8ly0004zt4ong3574k2"},{"post_id":"cieodz8mi000bzt4os4dl3e4z","category_id":"cieodz8mj000czt4o8f65e959","_id":"cieodz8mk000fzt4o6igry7fb"},{"post_id":"cieodz8ml000gzt4oetm6rok3","category_id":"cieodz8mm000hzt4ovv89cdh8","_id":"cieodz8mm000kzt4of4k40m9n"},{"post_id":"cieodz8mq000xzt4ogepeokuf","category_id":"cieodz8mr000yzt4otkpt2ea4","_id":"cieodz8mt0011zt4o0p1m224d"},{"post_id":"cieodz8mw0018zt4ot67abn6o","category_id":"cieodz8mr000yzt4otkpt2ea4","_id":"cieodz8mx0019zt4ogdv0uj38"},{"post_id":"cieodz8mz001fzt4oeq5r81ll","category_id":"cieodz8lv0001zt4o13yb89fr","_id":"cieodz8mz001gzt4o7kw3jw8g"},{"post_id":"cieodz8n1001lzt4owudz0gco","category_id":"cieodz8n2001mzt4ok9ihjbg7","_id":"cieodz8n2001pzt4omknl8ldq"},{"post_id":"cieodz8n4001uzt4oit1e04nc","category_id":"cieodz8n2001mzt4ok9ihjbg7","_id":"cieodz8n5001vzt4oo3dlhs86"},{"post_id":"cieodz8n7001zzt4ocixdtoor","category_id":"cieodz8n2001mzt4ok9ihjbg7","_id":"cieodz8n80020zt4o0lsuhrzb"},{"post_id":"cieodz8n90022zt4o5f6z2538","category_id":"cieodz8mm000hzt4ovv89cdh8","_id":"cieodz8na0023zt4owazrnayc"},{"post_id":"cieodz8nb0025zt4olrum004k","category_id":"cieodz8nd0026zt4ouaox910k","_id":"cieodz8ne0029zt4ogpzhvjvl"},{"post_id":"cieodz8nh002czt4o9cpmelzd","category_id":"cieodz8ni002dzt4oy7s5hra6","_id":"cieodz8nj002gzt4odtc992vz"},{"post_id":"cieodz8nn002lzt4ovjucxer4","category_id":"cieodz8lv0001zt4o13yb89fr","_id":"cieodz8no002mzt4ob755d0x6"},{"post_id":"cieodz8np002qzt4oidvb0y71","category_id":"cieodz8mr000yzt4otkpt2ea4","_id":"cieodz8nq002rzt4o88l1j15x"},{"post_id":"cieodz8nt002xzt4oe1ayikzd","category_id":"cieodz8mr000yzt4otkpt2ea4","_id":"cieodz8nu002yzt4ofvai33pw"},{"post_id":"cieodz8nw0034zt4o2m0ipi6m","category_id":"cieodz8n2001mzt4ok9ihjbg7","_id":"cieodz8nx0035zt4ot7yc8d5b"},{"post_id":"cieodz8mo000tzt4o11zjdo5v","category_id":"cieodz8mm000hzt4ovv89cdh8","_id":"cieoxs9tj0000hc6y70bckin8"}],"PostTag":[{"post_id":"cieodz8lq0000zt4o7kmm0ooz","tag_id":"cieodz8lw0002zt4oip2iu0mf","_id":"cieodz8m00006zt4o7b65lzcw"},{"post_id":"cieodz8lq0000zt4o7kmm0ooz","tag_id":"cieodz8ly0003zt4o718qkl7j","_id":"cieodz8m00007zt4or0xv0wcr"},{"post_id":"cieodz8lq0000zt4o7kmm0ooz","tag_id":"cieodz8lz0005zt4od30m2xws","_id":"cieodz8m00008zt4od58k9f88"},{"post_id":"cieodz8mi000bzt4os4dl3e4z","tag_id":"cieodz8mk000dzt4oziki6rc2","_id":"cieodz8mk000ezt4ox96xrpc9"},{"post_id":"cieodz8ml000gzt4oetm6rok3","tag_id":"cieodz8mm000izt4o16o1iohk","_id":"cieodz8mn000ozt4onjymp85q"},{"post_id":"cieodz8ml000gzt4oetm6rok3","tag_id":"cieodz8mm000jzt4ooy9r5s1d","_id":"cieodz8mn000pzt4olyu0d06b"},{"post_id":"cieodz8ml000gzt4oetm6rok3","tag_id":"cieodz8mn000lzt4o2mdbjvoa","_id":"cieodz8mn000qzt4o1nn517dx"},{"post_id":"cieodz8ml000gzt4oetm6rok3","tag_id":"cieodz8mn000mzt4onlkgfcys","_id":"cieodz8mn000rzt4oh1pv11aa"},{"post_id":"cieodz8ml000gzt4oetm6rok3","tag_id":"cieodz8mn000nzt4onlbj1nc0","_id":"cieodz8mn000szt4opqnc4we1"},{"post_id":"cieodz8mq000xzt4ogepeokuf","tag_id":"cieodz8ms000zzt4oqjuuywfm","_id":"cieodz8mu0014zt4oel039ctz"},{"post_id":"cieodz8mq000xzt4ogepeokuf","tag_id":"cieodz8mt0010zt4oa1q48jog","_id":"cieodz8mv0015zt4o1gw0nb3k"},{"post_id":"cieodz8mq000xzt4ogepeokuf","tag_id":"cieodz8mt0012zt4o1c74icjq","_id":"cieodz8mv0016zt4osazoez4j"},{"post_id":"cieodz8mq000xzt4ogepeokuf","tag_id":"cieodz8mu0013zt4oa8ym5ppq","_id":"cieodz8mv0017zt4oijkmdf4a"},{"post_id":"cieodz8mw0018zt4ot67abn6o","tag_id":"cieodz8mx001azt4olka26rlw","_id":"cieodz8my001czt4oso3k7lut"},{"post_id":"cieodz8mw0018zt4ot67abn6o","tag_id":"cieodz8mx001bzt4opw46exg0","_id":"cieodz8my001dzt4odhpbz0o0"},{"post_id":"cieodz8mw0018zt4ot67abn6o","tag_id":"cieodz8ms000zzt4oqjuuywfm","_id":"cieodz8my001ezt4ougqrubbw"},{"post_id":"cieodz8mz001fzt4oeq5r81ll","tag_id":"cieodz8lw0002zt4oip2iu0mf","_id":"cieodz8n0001izt4ou88mm4ij"},{"post_id":"cieodz8mz001fzt4oeq5r81ll","tag_id":"cieodz8mz001hzt4oi1akrztr","_id":"cieodz8n0001jzt4op8tt2ukz"},{"post_id":"cieodz8mz001fzt4oeq5r81ll","tag_id":"cieodz8ly0003zt4o718qkl7j","_id":"cieodz8n0001kzt4ogdhphd1o"},{"post_id":"cieodz8n1001lzt4owudz0gco","tag_id":"cieodz8n2001nzt4ojzri80f9","_id":"cieodz8n3001rzt4ohi165h9p"},{"post_id":"cieodz8n1001lzt4owudz0gco","tag_id":"cieodz8n2001ozt4ostrowg5v","_id":"cieodz8n3001szt4oeiwzparq"},{"post_id":"cieodz8n1001lzt4owudz0gco","tag_id":"cieodz8n3001qzt4o3fdgdb7a","_id":"cieodz8n3001tzt4ocf5oojyu"},{"post_id":"cieodz8n4001uzt4oit1e04nc","tag_id":"cieodz8n5001wzt4otvoxreic","_id":"cieodz8n6001xzt4ocxo4oe19"},{"post_id":"cieodz8n4001uzt4oit1e04nc","tag_id":"cieodz8mn000mzt4onlkgfcys","_id":"cieodz8n6001yzt4ovnhkaqc7"},{"post_id":"cieodz8n7001zzt4ocixdtoor","tag_id":"cieodz8n5001wzt4otvoxreic","_id":"cieodz8n80021zt4oavnh8sbv"},{"post_id":"cieodz8n90022zt4o5f6z2538","tag_id":"cieodz8ly0003zt4o718qkl7j","_id":"cieodz8na0024zt4o2n0vxg4p"},{"post_id":"cieodz8nb0025zt4olrum004k","tag_id":"cieodz8nd0027zt4opd96fmt2","_id":"cieodz8nf002azt4o7pabmt65"},{"post_id":"cieodz8nb0025zt4olrum004k","tag_id":"cieodz8ne0028zt4o8svjprio","_id":"cieodz8ng002bzt4oxvxujhil"},{"post_id":"cieodz8nh002czt4o9cpmelzd","tag_id":"cieodz8lz0005zt4od30m2xws","_id":"cieodz8nj002hzt4o2cm2vmw9"},{"post_id":"cieodz8nh002czt4o9cpmelzd","tag_id":"cieodz8ni002ezt4osxl4sfni","_id":"cieodz8nk002izt4orggbp453"},{"post_id":"cieodz8nh002czt4o9cpmelzd","tag_id":"cieodz8nj002fzt4oze6gecpd","_id":"cieodz8nk002jzt4o1es97pl0"},{"post_id":"cieodz8nn002lzt4ovjucxer4","tag_id":"cieodz8lw0002zt4oip2iu0mf","_id":"cieodz8no002ozt4ojmqwm0c7"},{"post_id":"cieodz8nn002lzt4ovjucxer4","tag_id":"cieodz8no002nzt4ok32i0l19","_id":"cieodz8no002pzt4oib1v95ei"},{"post_id":"cieodz8np002qzt4oidvb0y71","tag_id":"cieodz8nq002szt4oh22m6on4","_id":"cieodz8nr002uzt4o7o4c2v26"},{"post_id":"cieodz8np002qzt4oidvb0y71","tag_id":"cieodz8ms000zzt4oqjuuywfm","_id":"cieodz8nr002vzt4o0dmaupha"},{"post_id":"cieodz8np002qzt4oidvb0y71","tag_id":"cieodz8nr002tzt4ouzjci6ux","_id":"cieodz8nr002wzt4oj9ht16d1"},{"post_id":"cieodz8nt002xzt4oe1ayikzd","tag_id":"cieodz8ms000zzt4oqjuuywfm","_id":"cieodz8nu002zzt4o75q7nmsx"},{"post_id":"cieodz8nt002xzt4oe1ayikzd","tag_id":"cieodz8n5001wzt4otvoxreic","_id":"cieodz8nu0030zt4ow6ok135i"},{"post_id":"cieodz8nt002xzt4oe1ayikzd","tag_id":"cieodz8nr002tzt4ouzjci6ux","_id":"cieodz8nv0031zt4o1i10r6qi"},{"post_id":"cieodz8nt002xzt4oe1ayikzd","tag_id":"cieodz8nq002szt4oh22m6on4","_id":"cieodz8nv0032zt4ok800jwqn"},{"post_id":"cieodz8nt002xzt4oe1ayikzd","tag_id":"cieodz8mt0010zt4oa1q48jog","_id":"cieodz8nv0033zt4oujfnn81t"},{"post_id":"cieodz8nw0034zt4o2m0ipi6m","tag_id":"cieodz8nx0036zt4o5m3yn7d4","_id":"cieodz8ny0037zt4o4cdau8ju"},{"post_id":"cieodz8nw0034zt4o2m0ipi6m","tag_id":"cieodz8mn000mzt4onlkgfcys","_id":"cieodz8ny0038zt4ow4tflcnb"},{"post_id":"cieodz8mo000tzt4o11zjdo5v","tag_id":"cieodz8ly0003zt4o718qkl7j","_id":"cieoxs9tk0001hc6yejl0art5"}],"Tag":[{"name":"angularjs","_id":"cieodz8lw0002zt4oip2iu0mf"},{"name":"javascript","_id":"cieodz8ly0003zt4o718qkl7j"},{"name":"experience","_id":"cieodz8lz0005zt4od30m2xws"},{"name":"life","_id":"cieodz8mk000dzt4oziki6rc2"},{"name":"svg","_id":"cieodz8mm000izt4o16o1iohk"},{"name":"canvas","_id":"cieodz8mm000jzt4ooy9r5s1d"},{"name":"libray","_id":"cieodz8mn000lzt4o2mdbjvoa"},{"name":"animation","_id":"cieodz8mn000mzt4onlkgfcys"},{"name":"frent-end","_id":"cieodz8mn000nzt4onlbj1nc0"},{"name":"javascipt","_id":"cieodz8mp000vzt4okc3b7qqv"},{"name":"tool","_id":"cieodz8ms000zzt4oqjuuywfm"},{"name":"webapp","_id":"cieodz8mt0010zt4oa1q48jog"},{"name":"gasmark","_id":"cieodz8mt0012zt4o1c74icjq"},{"name":"charles","_id":"cieodz8mu0013zt4oa8ym5ppq"},{"name":"gulp","_id":"cieodz8mx001azt4olka26rlw"},{"name":"plugin","_id":"cieodz8mx001bzt4opw46exg0"},{"name":"service","_id":"cieodz8mz001hzt4oi1akrztr"},{"name":"css","_id":"cieodz8n2001nzt4ojzri80f9"},{"name":"flexbox","_id":"cieodz8n2001ozt4ostrowg5v"},{"name":"弹性布局","_id":"cieodz8n3001qzt4o3fdgdb7a"},{"name":"front-end","_id":"cieodz8n5001wzt4otvoxreic"},{"name":"ionic","_id":"cieodz8nd0027zt4opd96fmt2"},{"name":"cmd","_id":"cieodz8ne0028zt4o8svjprio"},{"name":"github","_id":"cieodz8ni002ezt4osxl4sfni"},{"name":"hexo","_id":"cieodz8nj002fzt4oze6gecpd"},{"name":"directive","_id":"cieodz8no002nzt4ok32i0l19"},{"name":"debug","_id":"cieodz8nq002szt4oh22m6on4"},{"name":"chrome","_id":"cieodz8nr002tzt4ouzjci6ux"},{"name":"css3","_id":"cieodz8nx0036zt4o5m3yn7d4"}]}}